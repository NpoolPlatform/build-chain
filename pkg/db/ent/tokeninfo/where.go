// Code generated by ent, DO NOT EDIT.

package tokeninfo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// ChainType applies equality check predicate on the "chain_type" field. It's identical to ChainTypeEQ.
func ChainType(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainType), v))
	})
}

// TokenType applies equality check predicate on the "token_type" field. It's identical to TokenTypeEQ.
func TokenType(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenType), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// Decimal applies equality check predicate on the "decimal" field. It's identical to DecimalEQ.
func Decimal(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDecimal), v))
	})
}

// OfficialContract applies equality check predicate on the "official_contract" field. It's identical to OfficialContractEQ.
func OfficialContract(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfficialContract), v))
	})
}

// PrivateContract applies equality check predicate on the "private_contract" field. It's identical to PrivateContractEQ.
func PrivateContract(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateContract), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ChainTypeEQ applies the EQ predicate on the "chain_type" field.
func ChainTypeEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainType), v))
	})
}

// ChainTypeNEQ applies the NEQ predicate on the "chain_type" field.
func ChainTypeNEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainType), v))
	})
}

// ChainTypeIn applies the In predicate on the "chain_type" field.
func ChainTypeIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainType), v...))
	})
}

// ChainTypeNotIn applies the NotIn predicate on the "chain_type" field.
func ChainTypeNotIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainType), v...))
	})
}

// ChainTypeGT applies the GT predicate on the "chain_type" field.
func ChainTypeGT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainType), v))
	})
}

// ChainTypeGTE applies the GTE predicate on the "chain_type" field.
func ChainTypeGTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainType), v))
	})
}

// ChainTypeLT applies the LT predicate on the "chain_type" field.
func ChainTypeLT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainType), v))
	})
}

// ChainTypeLTE applies the LTE predicate on the "chain_type" field.
func ChainTypeLTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainType), v))
	})
}

// ChainTypeContains applies the Contains predicate on the "chain_type" field.
func ChainTypeContains(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainType), v))
	})
}

// ChainTypeHasPrefix applies the HasPrefix predicate on the "chain_type" field.
func ChainTypeHasPrefix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainType), v))
	})
}

// ChainTypeHasSuffix applies the HasSuffix predicate on the "chain_type" field.
func ChainTypeHasSuffix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainType), v))
	})
}

// ChainTypeIsNil applies the IsNil predicate on the "chain_type" field.
func ChainTypeIsNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChainType)))
	})
}

// ChainTypeNotNil applies the NotNil predicate on the "chain_type" field.
func ChainTypeNotNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChainType)))
	})
}

// ChainTypeEqualFold applies the EqualFold predicate on the "chain_type" field.
func ChainTypeEqualFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainType), v))
	})
}

// ChainTypeContainsFold applies the ContainsFold predicate on the "chain_type" field.
func ChainTypeContainsFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainType), v))
	})
}

// TokenTypeEQ applies the EQ predicate on the "token_type" field.
func TokenTypeEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenType), v))
	})
}

// TokenTypeNEQ applies the NEQ predicate on the "token_type" field.
func TokenTypeNEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenType), v))
	})
}

// TokenTypeIn applies the In predicate on the "token_type" field.
func TokenTypeIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenType), v...))
	})
}

// TokenTypeNotIn applies the NotIn predicate on the "token_type" field.
func TokenTypeNotIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenType), v...))
	})
}

// TokenTypeGT applies the GT predicate on the "token_type" field.
func TokenTypeGT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenType), v))
	})
}

// TokenTypeGTE applies the GTE predicate on the "token_type" field.
func TokenTypeGTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenType), v))
	})
}

// TokenTypeLT applies the LT predicate on the "token_type" field.
func TokenTypeLT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenType), v))
	})
}

// TokenTypeLTE applies the LTE predicate on the "token_type" field.
func TokenTypeLTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenType), v))
	})
}

// TokenTypeContains applies the Contains predicate on the "token_type" field.
func TokenTypeContains(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTokenType), v))
	})
}

// TokenTypeHasPrefix applies the HasPrefix predicate on the "token_type" field.
func TokenTypeHasPrefix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTokenType), v))
	})
}

// TokenTypeHasSuffix applies the HasSuffix predicate on the "token_type" field.
func TokenTypeHasSuffix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTokenType), v))
	})
}

// TokenTypeIsNil applies the IsNil predicate on the "token_type" field.
func TokenTypeIsNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTokenType)))
	})
}

// TokenTypeNotNil applies the NotNil predicate on the "token_type" field.
func TokenTypeNotNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTokenType)))
	})
}

// TokenTypeEqualFold applies the EqualFold predicate on the "token_type" field.
func TokenTypeEqualFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTokenType), v))
	})
}

// TokenTypeContainsFold applies the ContainsFold predicate on the "token_type" field.
func TokenTypeContainsFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTokenType), v))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitIsNil applies the IsNil predicate on the "unit" field.
func UnitIsNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUnit)))
	})
}

// UnitNotNil applies the NotNil predicate on the "unit" field.
func UnitNotNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUnit)))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// DecimalEQ applies the EQ predicate on the "decimal" field.
func DecimalEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDecimal), v))
	})
}

// DecimalNEQ applies the NEQ predicate on the "decimal" field.
func DecimalNEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDecimal), v))
	})
}

// DecimalIn applies the In predicate on the "decimal" field.
func DecimalIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDecimal), v...))
	})
}

// DecimalNotIn applies the NotIn predicate on the "decimal" field.
func DecimalNotIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDecimal), v...))
	})
}

// DecimalGT applies the GT predicate on the "decimal" field.
func DecimalGT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDecimal), v))
	})
}

// DecimalGTE applies the GTE predicate on the "decimal" field.
func DecimalGTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDecimal), v))
	})
}

// DecimalLT applies the LT predicate on the "decimal" field.
func DecimalLT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDecimal), v))
	})
}

// DecimalLTE applies the LTE predicate on the "decimal" field.
func DecimalLTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDecimal), v))
	})
}

// DecimalContains applies the Contains predicate on the "decimal" field.
func DecimalContains(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDecimal), v))
	})
}

// DecimalHasPrefix applies the HasPrefix predicate on the "decimal" field.
func DecimalHasPrefix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDecimal), v))
	})
}

// DecimalHasSuffix applies the HasSuffix predicate on the "decimal" field.
func DecimalHasSuffix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDecimal), v))
	})
}

// DecimalIsNil applies the IsNil predicate on the "decimal" field.
func DecimalIsNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDecimal)))
	})
}

// DecimalNotNil applies the NotNil predicate on the "decimal" field.
func DecimalNotNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDecimal)))
	})
}

// DecimalEqualFold applies the EqualFold predicate on the "decimal" field.
func DecimalEqualFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDecimal), v))
	})
}

// DecimalContainsFold applies the ContainsFold predicate on the "decimal" field.
func DecimalContainsFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDecimal), v))
	})
}

// OfficialContractEQ applies the EQ predicate on the "official_contract" field.
func OfficialContractEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractNEQ applies the NEQ predicate on the "official_contract" field.
func OfficialContractNEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractIn applies the In predicate on the "official_contract" field.
func OfficialContractIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOfficialContract), v...))
	})
}

// OfficialContractNotIn applies the NotIn predicate on the "official_contract" field.
func OfficialContractNotIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOfficialContract), v...))
	})
}

// OfficialContractGT applies the GT predicate on the "official_contract" field.
func OfficialContractGT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractGTE applies the GTE predicate on the "official_contract" field.
func OfficialContractGTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractLT applies the LT predicate on the "official_contract" field.
func OfficialContractLT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractLTE applies the LTE predicate on the "official_contract" field.
func OfficialContractLTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractContains applies the Contains predicate on the "official_contract" field.
func OfficialContractContains(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractHasPrefix applies the HasPrefix predicate on the "official_contract" field.
func OfficialContractHasPrefix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractHasSuffix applies the HasSuffix predicate on the "official_contract" field.
func OfficialContractHasSuffix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractEqualFold applies the EqualFold predicate on the "official_contract" field.
func OfficialContractEqualFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOfficialContract), v))
	})
}

// OfficialContractContainsFold applies the ContainsFold predicate on the "official_contract" field.
func OfficialContractContainsFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOfficialContract), v))
	})
}

// PrivateContractEQ applies the EQ predicate on the "private_contract" field.
func PrivateContractEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractNEQ applies the NEQ predicate on the "private_contract" field.
func PrivateContractNEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractIn applies the In predicate on the "private_contract" field.
func PrivateContractIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrivateContract), v...))
	})
}

// PrivateContractNotIn applies the NotIn predicate on the "private_contract" field.
func PrivateContractNotIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrivateContract), v...))
	})
}

// PrivateContractGT applies the GT predicate on the "private_contract" field.
func PrivateContractGT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractGTE applies the GTE predicate on the "private_contract" field.
func PrivateContractGTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractLT applies the LT predicate on the "private_contract" field.
func PrivateContractLT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractLTE applies the LTE predicate on the "private_contract" field.
func PrivateContractLTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractContains applies the Contains predicate on the "private_contract" field.
func PrivateContractContains(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractHasPrefix applies the HasPrefix predicate on the "private_contract" field.
func PrivateContractHasPrefix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractHasSuffix applies the HasSuffix predicate on the "private_contract" field.
func PrivateContractHasSuffix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractEqualFold applies the EqualFold predicate on the "private_contract" field.
func PrivateContractEqualFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivateContract), v))
	})
}

// PrivateContractContainsFold applies the ContainsFold predicate on the "private_contract" field.
func PrivateContractContainsFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivateContract), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldData), v))
	})
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldData), v...))
	})
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.TokenInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldData), v...))
	})
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldData), v))
	})
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldData), v))
	})
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldData), v))
	})
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldData), v))
	})
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldData)))
	})
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldData)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TokenInfo) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TokenInfo) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TokenInfo) predicate.TokenInfo {
	return predicate.TokenInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
