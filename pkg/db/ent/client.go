// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/NpoolPlatform/build-chain/pkg/db/ent/migrate"
	"github.com/google/uuid"

	"github.com/NpoolPlatform/build-chain/pkg/db/ent/coinsinfo"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/deployedcoin"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CoinsInfo is the client for interacting with the CoinsInfo builders.
	CoinsInfo *CoinsInfoClient
	// DeployedCoin is the client for interacting with the DeployedCoin builders.
	DeployedCoin *DeployedCoinClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CoinsInfo = NewCoinsInfoClient(c.config)
	c.DeployedCoin = NewDeployedCoinClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CoinsInfo:    NewCoinsInfoClient(cfg),
		DeployedCoin: NewDeployedCoinClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		CoinsInfo:    NewCoinsInfoClient(cfg),
		DeployedCoin: NewDeployedCoinClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CoinsInfo.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CoinsInfo.Use(hooks...)
	c.DeployedCoin.Use(hooks...)
}

// CoinsInfoClient is a client for the CoinsInfo schema.
type CoinsInfoClient struct {
	config
}

// NewCoinsInfoClient returns a client for the CoinsInfo from the given config.
func NewCoinsInfoClient(c config) *CoinsInfoClient {
	return &CoinsInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coinsinfo.Hooks(f(g(h())))`.
func (c *CoinsInfoClient) Use(hooks ...Hook) {
	c.hooks.CoinsInfo = append(c.hooks.CoinsInfo, hooks...)
}

// Create returns a create builder for CoinsInfo.
func (c *CoinsInfoClient) Create() *CoinsInfoCreate {
	mutation := newCoinsInfoMutation(c.config, OpCreate)
	return &CoinsInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CoinsInfo entities.
func (c *CoinsInfoClient) CreateBulk(builders ...*CoinsInfoCreate) *CoinsInfoCreateBulk {
	return &CoinsInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CoinsInfo.
func (c *CoinsInfoClient) Update() *CoinsInfoUpdate {
	mutation := newCoinsInfoMutation(c.config, OpUpdate)
	return &CoinsInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinsInfoClient) UpdateOne(ci *CoinsInfo) *CoinsInfoUpdateOne {
	mutation := newCoinsInfoMutation(c.config, OpUpdateOne, withCoinsInfo(ci))
	return &CoinsInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinsInfoClient) UpdateOneID(id uuid.UUID) *CoinsInfoUpdateOne {
	mutation := newCoinsInfoMutation(c.config, OpUpdateOne, withCoinsInfoID(id))
	return &CoinsInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CoinsInfo.
func (c *CoinsInfoClient) Delete() *CoinsInfoDelete {
	mutation := newCoinsInfoMutation(c.config, OpDelete)
	return &CoinsInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CoinsInfoClient) DeleteOne(ci *CoinsInfo) *CoinsInfoDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CoinsInfoClient) DeleteOneID(id uuid.UUID) *CoinsInfoDeleteOne {
	builder := c.Delete().Where(coinsinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinsInfoDeleteOne{builder}
}

// Query returns a query builder for CoinsInfo.
func (c *CoinsInfoClient) Query() *CoinsInfoQuery {
	return &CoinsInfoQuery{
		config: c.config,
	}
}

// Get returns a CoinsInfo entity by its id.
func (c *CoinsInfoClient) Get(ctx context.Context, id uuid.UUID) (*CoinsInfo, error) {
	return c.Query().Where(coinsinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinsInfoClient) GetX(ctx context.Context, id uuid.UUID) *CoinsInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinsInfoClient) Hooks() []Hook {
	hooks := c.hooks.CoinsInfo
	return append(hooks[:len(hooks):len(hooks)], coinsinfo.Hooks[:]...)
}

// DeployedCoinClient is a client for the DeployedCoin schema.
type DeployedCoinClient struct {
	config
}

// NewDeployedCoinClient returns a client for the DeployedCoin from the given config.
func NewDeployedCoinClient(c config) *DeployedCoinClient {
	return &DeployedCoinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deployedcoin.Hooks(f(g(h())))`.
func (c *DeployedCoinClient) Use(hooks ...Hook) {
	c.hooks.DeployedCoin = append(c.hooks.DeployedCoin, hooks...)
}

// Create returns a create builder for DeployedCoin.
func (c *DeployedCoinClient) Create() *DeployedCoinCreate {
	mutation := newDeployedCoinMutation(c.config, OpCreate)
	return &DeployedCoinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeployedCoin entities.
func (c *DeployedCoinClient) CreateBulk(builders ...*DeployedCoinCreate) *DeployedCoinCreateBulk {
	return &DeployedCoinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeployedCoin.
func (c *DeployedCoinClient) Update() *DeployedCoinUpdate {
	mutation := newDeployedCoinMutation(c.config, OpUpdate)
	return &DeployedCoinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeployedCoinClient) UpdateOne(dc *DeployedCoin) *DeployedCoinUpdateOne {
	mutation := newDeployedCoinMutation(c.config, OpUpdateOne, withDeployedCoin(dc))
	return &DeployedCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeployedCoinClient) UpdateOneID(id uuid.UUID) *DeployedCoinUpdateOne {
	mutation := newDeployedCoinMutation(c.config, OpUpdateOne, withDeployedCoinID(id))
	return &DeployedCoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeployedCoin.
func (c *DeployedCoinClient) Delete() *DeployedCoinDelete {
	mutation := newDeployedCoinMutation(c.config, OpDelete)
	return &DeployedCoinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeployedCoinClient) DeleteOne(dc *DeployedCoin) *DeployedCoinDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeployedCoinClient) DeleteOneID(id uuid.UUID) *DeployedCoinDeleteOne {
	builder := c.Delete().Where(deployedcoin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeployedCoinDeleteOne{builder}
}

// Query returns a query builder for DeployedCoin.
func (c *DeployedCoinClient) Query() *DeployedCoinQuery {
	return &DeployedCoinQuery{
		config: c.config,
	}
}

// Get returns a DeployedCoin entity by its id.
func (c *DeployedCoinClient) Get(ctx context.Context, id uuid.UUID) (*DeployedCoin, error) {
	return c.Query().Where(deployedcoin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeployedCoinClient) GetX(ctx context.Context, id uuid.UUID) *DeployedCoin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeployedCoinClient) Hooks() []Hook {
	hooks := c.hooks.DeployedCoin
	return append(hooks[:len(hooks):len(hooks)], deployedcoin.Hooks[:]...)
}
