// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/deployedcoin"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// DeployedCoinUpdate is the builder for updating DeployedCoin entities.
type DeployedCoinUpdate struct {
	config
	hooks    []Hook
	mutation *DeployedCoinMutation
}

// Where appends a list predicates to the DeployedCoinUpdate builder.
func (dcu *DeployedCoinUpdate) Where(ps ...predicate.DeployedCoin) *DeployedCoinUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetCreatedAt sets the "created_at" field.
func (dcu *DeployedCoinUpdate) SetCreatedAt(u uint32) *DeployedCoinUpdate {
	dcu.mutation.ResetCreatedAt()
	dcu.mutation.SetCreatedAt(u)
	return dcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcu *DeployedCoinUpdate) SetNillableCreatedAt(u *uint32) *DeployedCoinUpdate {
	if u != nil {
		dcu.SetCreatedAt(*u)
	}
	return dcu
}

// AddCreatedAt adds u to the "created_at" field.
func (dcu *DeployedCoinUpdate) AddCreatedAt(u int32) *DeployedCoinUpdate {
	dcu.mutation.AddCreatedAt(u)
	return dcu
}

// SetUpdatedAt sets the "updated_at" field.
func (dcu *DeployedCoinUpdate) SetUpdatedAt(u uint32) *DeployedCoinUpdate {
	dcu.mutation.ResetUpdatedAt()
	dcu.mutation.SetUpdatedAt(u)
	return dcu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (dcu *DeployedCoinUpdate) AddUpdatedAt(u int32) *DeployedCoinUpdate {
	dcu.mutation.AddUpdatedAt(u)
	return dcu
}

// SetDeletedAt sets the "deleted_at" field.
func (dcu *DeployedCoinUpdate) SetDeletedAt(u uint32) *DeployedCoinUpdate {
	dcu.mutation.ResetDeletedAt()
	dcu.mutation.SetDeletedAt(u)
	return dcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dcu *DeployedCoinUpdate) SetNillableDeletedAt(u *uint32) *DeployedCoinUpdate {
	if u != nil {
		dcu.SetDeletedAt(*u)
	}
	return dcu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (dcu *DeployedCoinUpdate) AddDeletedAt(u int32) *DeployedCoinUpdate {
	dcu.mutation.AddDeletedAt(u)
	return dcu
}

// SetCoinID sets the "coin_id" field.
func (dcu *DeployedCoinUpdate) SetCoinID(u uuid.UUID) *DeployedCoinUpdate {
	dcu.mutation.SetCoinID(u)
	return dcu
}

// SetNillableCoinID sets the "coin_id" field if the given value is not nil.
func (dcu *DeployedCoinUpdate) SetNillableCoinID(u *uuid.UUID) *DeployedCoinUpdate {
	if u != nil {
		dcu.SetCoinID(*u)
	}
	return dcu
}

// SetContract sets the "contract" field.
func (dcu *DeployedCoinUpdate) SetContract(s string) *DeployedCoinUpdate {
	dcu.mutation.SetContract(s)
	return dcu
}

// SetNillableContract sets the "contract" field if the given value is not nil.
func (dcu *DeployedCoinUpdate) SetNillableContract(s *string) *DeployedCoinUpdate {
	if s != nil {
		dcu.SetContract(*s)
	}
	return dcu
}

// ClearContract clears the value of the "contract" field.
func (dcu *DeployedCoinUpdate) ClearContract() *DeployedCoinUpdate {
	dcu.mutation.ClearContract()
	return dcu
}

// Mutation returns the DeployedCoinMutation object of the builder.
func (dcu *DeployedCoinUpdate) Mutation() *DeployedCoinMutation {
	return dcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DeployedCoinUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := dcu.defaults(); err != nil {
		return 0, err
	}
	if len(dcu.hooks) == 0 {
		affected, err = dcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeployedCoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dcu.mutation = mutation
			affected, err = dcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dcu.hooks) - 1; i >= 0; i-- {
			if dcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DeployedCoinUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DeployedCoinUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DeployedCoinUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DeployedCoinUpdate) defaults() error {
	if _, ok := dcu.mutation.UpdatedAt(); !ok {
		if deployedcoin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deployedcoin.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deployedcoin.UpdateDefaultUpdatedAt()
		dcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (dcu *DeployedCoinUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployedcoin.Table,
			Columns: deployedcoin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deployedcoin.FieldID,
			},
		},
	}
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldCreatedAt,
		})
	}
	if value, ok := dcu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldCreatedAt,
		})
	}
	if value, ok := dcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldUpdatedAt,
		})
	}
	if value, ok := dcu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldUpdatedAt,
		})
	}
	if value, ok := dcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldDeletedAt,
		})
	}
	if value, ok := dcu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldDeletedAt,
		})
	}
	if value, ok := dcu.mutation.CoinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deployedcoin.FieldCoinID,
		})
	}
	if value, ok := dcu.mutation.Contract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployedcoin.FieldContract,
		})
	}
	if dcu.mutation.ContractCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deployedcoin.FieldContract,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployedcoin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeployedCoinUpdateOne is the builder for updating a single DeployedCoin entity.
type DeployedCoinUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeployedCoinMutation
}

// SetCreatedAt sets the "created_at" field.
func (dcuo *DeployedCoinUpdateOne) SetCreatedAt(u uint32) *DeployedCoinUpdateOne {
	dcuo.mutation.ResetCreatedAt()
	dcuo.mutation.SetCreatedAt(u)
	return dcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcuo *DeployedCoinUpdateOne) SetNillableCreatedAt(u *uint32) *DeployedCoinUpdateOne {
	if u != nil {
		dcuo.SetCreatedAt(*u)
	}
	return dcuo
}

// AddCreatedAt adds u to the "created_at" field.
func (dcuo *DeployedCoinUpdateOne) AddCreatedAt(u int32) *DeployedCoinUpdateOne {
	dcuo.mutation.AddCreatedAt(u)
	return dcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dcuo *DeployedCoinUpdateOne) SetUpdatedAt(u uint32) *DeployedCoinUpdateOne {
	dcuo.mutation.ResetUpdatedAt()
	dcuo.mutation.SetUpdatedAt(u)
	return dcuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (dcuo *DeployedCoinUpdateOne) AddUpdatedAt(u int32) *DeployedCoinUpdateOne {
	dcuo.mutation.AddUpdatedAt(u)
	return dcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (dcuo *DeployedCoinUpdateOne) SetDeletedAt(u uint32) *DeployedCoinUpdateOne {
	dcuo.mutation.ResetDeletedAt()
	dcuo.mutation.SetDeletedAt(u)
	return dcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dcuo *DeployedCoinUpdateOne) SetNillableDeletedAt(u *uint32) *DeployedCoinUpdateOne {
	if u != nil {
		dcuo.SetDeletedAt(*u)
	}
	return dcuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (dcuo *DeployedCoinUpdateOne) AddDeletedAt(u int32) *DeployedCoinUpdateOne {
	dcuo.mutation.AddDeletedAt(u)
	return dcuo
}

// SetCoinID sets the "coin_id" field.
func (dcuo *DeployedCoinUpdateOne) SetCoinID(u uuid.UUID) *DeployedCoinUpdateOne {
	dcuo.mutation.SetCoinID(u)
	return dcuo
}

// SetNillableCoinID sets the "coin_id" field if the given value is not nil.
func (dcuo *DeployedCoinUpdateOne) SetNillableCoinID(u *uuid.UUID) *DeployedCoinUpdateOne {
	if u != nil {
		dcuo.SetCoinID(*u)
	}
	return dcuo
}

// SetContract sets the "contract" field.
func (dcuo *DeployedCoinUpdateOne) SetContract(s string) *DeployedCoinUpdateOne {
	dcuo.mutation.SetContract(s)
	return dcuo
}

// SetNillableContract sets the "contract" field if the given value is not nil.
func (dcuo *DeployedCoinUpdateOne) SetNillableContract(s *string) *DeployedCoinUpdateOne {
	if s != nil {
		dcuo.SetContract(*s)
	}
	return dcuo
}

// ClearContract clears the value of the "contract" field.
func (dcuo *DeployedCoinUpdateOne) ClearContract() *DeployedCoinUpdateOne {
	dcuo.mutation.ClearContract()
	return dcuo
}

// Mutation returns the DeployedCoinMutation object of the builder.
func (dcuo *DeployedCoinUpdateOne) Mutation() *DeployedCoinMutation {
	return dcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DeployedCoinUpdateOne) Select(field string, fields ...string) *DeployedCoinUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DeployedCoin entity.
func (dcuo *DeployedCoinUpdateOne) Save(ctx context.Context) (*DeployedCoin, error) {
	var (
		err  error
		node *DeployedCoin
	)
	if err := dcuo.defaults(); err != nil {
		return nil, err
	}
	if len(dcuo.hooks) == 0 {
		node, err = dcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeployedCoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dcuo.mutation = mutation
			node, err = dcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dcuo.hooks) - 1; i >= 0; i-- {
			if dcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DeployedCoinUpdateOne) SaveX(ctx context.Context) *DeployedCoin {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DeployedCoinUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DeployedCoinUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DeployedCoinUpdateOne) defaults() error {
	if _, ok := dcuo.mutation.UpdatedAt(); !ok {
		if deployedcoin.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deployedcoin.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deployedcoin.UpdateDefaultUpdatedAt()
		dcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (dcuo *DeployedCoinUpdateOne) sqlSave(ctx context.Context) (_node *DeployedCoin, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployedcoin.Table,
			Columns: deployedcoin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deployedcoin.FieldID,
			},
		},
	}
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeployedCoin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deployedcoin.FieldID)
		for _, f := range fields {
			if !deployedcoin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deployedcoin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldCreatedAt,
		})
	}
	if value, ok := dcuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldCreatedAt,
		})
	}
	if value, ok := dcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldUpdatedAt,
		})
	}
	if value, ok := dcuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldUpdatedAt,
		})
	}
	if value, ok := dcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldDeletedAt,
		})
	}
	if value, ok := dcuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldDeletedAt,
		})
	}
	if value, ok := dcuo.mutation.CoinID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deployedcoin.FieldCoinID,
		})
	}
	if value, ok := dcuo.mutation.Contract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployedcoin.FieldContract,
		})
	}
	if dcuo.mutation.ContractCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: deployedcoin.FieldContract,
		})
	}
	_node = &DeployedCoin{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployedcoin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
