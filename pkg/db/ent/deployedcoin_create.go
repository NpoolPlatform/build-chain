// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/deployedcoin"
	"github.com/google/uuid"
)

// DeployedCoinCreate is the builder for creating a DeployedCoin entity.
type DeployedCoinCreate struct {
	config
	mutation *DeployedCoinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (dcc *DeployedCoinCreate) SetCreatedAt(u uint32) *DeployedCoinCreate {
	dcc.mutation.SetCreatedAt(u)
	return dcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcc *DeployedCoinCreate) SetNillableCreatedAt(u *uint32) *DeployedCoinCreate {
	if u != nil {
		dcc.SetCreatedAt(*u)
	}
	return dcc
}

// SetUpdatedAt sets the "updated_at" field.
func (dcc *DeployedCoinCreate) SetUpdatedAt(u uint32) *DeployedCoinCreate {
	dcc.mutation.SetUpdatedAt(u)
	return dcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dcc *DeployedCoinCreate) SetNillableUpdatedAt(u *uint32) *DeployedCoinCreate {
	if u != nil {
		dcc.SetUpdatedAt(*u)
	}
	return dcc
}

// SetDeletedAt sets the "deleted_at" field.
func (dcc *DeployedCoinCreate) SetDeletedAt(u uint32) *DeployedCoinCreate {
	dcc.mutation.SetDeletedAt(u)
	return dcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dcc *DeployedCoinCreate) SetNillableDeletedAt(u *uint32) *DeployedCoinCreate {
	if u != nil {
		dcc.SetDeletedAt(*u)
	}
	return dcc
}

// SetCoinID sets the "coin_id" field.
func (dcc *DeployedCoinCreate) SetCoinID(u uuid.UUID) *DeployedCoinCreate {
	dcc.mutation.SetCoinID(u)
	return dcc
}

// SetNillableCoinID sets the "coin_id" field if the given value is not nil.
func (dcc *DeployedCoinCreate) SetNillableCoinID(u *uuid.UUID) *DeployedCoinCreate {
	if u != nil {
		dcc.SetCoinID(*u)
	}
	return dcc
}

// SetContract sets the "contract" field.
func (dcc *DeployedCoinCreate) SetContract(s string) *DeployedCoinCreate {
	dcc.mutation.SetContract(s)
	return dcc
}

// SetNillableContract sets the "contract" field if the given value is not nil.
func (dcc *DeployedCoinCreate) SetNillableContract(s *string) *DeployedCoinCreate {
	if s != nil {
		dcc.SetContract(*s)
	}
	return dcc
}

// SetID sets the "id" field.
func (dcc *DeployedCoinCreate) SetID(u uuid.UUID) *DeployedCoinCreate {
	dcc.mutation.SetID(u)
	return dcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dcc *DeployedCoinCreate) SetNillableID(u *uuid.UUID) *DeployedCoinCreate {
	if u != nil {
		dcc.SetID(*u)
	}
	return dcc
}

// Mutation returns the DeployedCoinMutation object of the builder.
func (dcc *DeployedCoinCreate) Mutation() *DeployedCoinMutation {
	return dcc.mutation
}

// Save creates the DeployedCoin in the database.
func (dcc *DeployedCoinCreate) Save(ctx context.Context) (*DeployedCoin, error) {
	var (
		err  error
		node *DeployedCoin
	)
	if err := dcc.defaults(); err != nil {
		return nil, err
	}
	if len(dcc.hooks) == 0 {
		if err = dcc.check(); err != nil {
			return nil, err
		}
		node, err = dcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeployedCoinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcc.check(); err != nil {
				return nil, err
			}
			dcc.mutation = mutation
			if node, err = dcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dcc.hooks) - 1; i >= 0; i-- {
			if dcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DeployedCoin)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DeployedCoinMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DeployedCoinCreate) SaveX(ctx context.Context) *DeployedCoin {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DeployedCoinCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DeployedCoinCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcc *DeployedCoinCreate) defaults() error {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		if deployedcoin.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized deployedcoin.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := deployedcoin.DefaultCreatedAt()
		dcc.mutation.SetCreatedAt(v)
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		if deployedcoin.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized deployedcoin.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := deployedcoin.DefaultUpdatedAt()
		dcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dcc.mutation.DeletedAt(); !ok {
		if deployedcoin.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized deployedcoin.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := deployedcoin.DefaultDeletedAt()
		dcc.mutation.SetDeletedAt(v)
	}
	if _, ok := dcc.mutation.CoinID(); !ok {
		if deployedcoin.DefaultCoinID == nil {
			return fmt.Errorf("ent: uninitialized deployedcoin.DefaultCoinID (forgotten import ent/runtime?)")
		}
		v := deployedcoin.DefaultCoinID()
		dcc.mutation.SetCoinID(v)
	}
	if _, ok := dcc.mutation.Contract(); !ok {
		v := deployedcoin.DefaultContract
		dcc.mutation.SetContract(v)
	}
	if _, ok := dcc.mutation.ID(); !ok {
		if deployedcoin.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deployedcoin.DefaultID (forgotten import ent/runtime?)")
		}
		v := deployedcoin.DefaultID()
		dcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DeployedCoinCreate) check() error {
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DeployedCoin.created_at"`)}
	}
	if _, ok := dcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DeployedCoin.updated_at"`)}
	}
	if _, ok := dcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "DeployedCoin.deleted_at"`)}
	}
	if _, ok := dcc.mutation.CoinID(); !ok {
		return &ValidationError{Name: "coin_id", err: errors.New(`ent: missing required field "DeployedCoin.coin_id"`)}
	}
	return nil
}

func (dcc *DeployedCoinCreate) sqlSave(ctx context.Context) (*DeployedCoin, error) {
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dcc *DeployedCoinCreate) createSpec() (*DeployedCoin, *sqlgraph.CreateSpec) {
	var (
		_node = &DeployedCoin{config: dcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deployedcoin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deployedcoin.FieldID,
			},
		}
	)
	_spec.OnConflict = dcc.conflict
	if id, ok := dcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: deployedcoin.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := dcc.mutation.CoinID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: deployedcoin.FieldCoinID,
		})
		_node.CoinID = value
	}
	if value, ok := dcc.mutation.Contract(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployedcoin.FieldContract,
		})
		_node.Contract = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeployedCoin.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeployedCoinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dcc *DeployedCoinCreate) OnConflict(opts ...sql.ConflictOption) *DeployedCoinUpsertOne {
	dcc.conflict = opts
	return &DeployedCoinUpsertOne{
		create: dcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeployedCoin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dcc *DeployedCoinCreate) OnConflictColumns(columns ...string) *DeployedCoinUpsertOne {
	dcc.conflict = append(dcc.conflict, sql.ConflictColumns(columns...))
	return &DeployedCoinUpsertOne{
		create: dcc,
	}
}

type (
	// DeployedCoinUpsertOne is the builder for "upsert"-ing
	//  one DeployedCoin node.
	DeployedCoinUpsertOne struct {
		create *DeployedCoinCreate
	}

	// DeployedCoinUpsert is the "OnConflict" setter.
	DeployedCoinUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *DeployedCoinUpsert) SetCreatedAt(v uint32) *DeployedCoinUpsert {
	u.Set(deployedcoin.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeployedCoinUpsert) UpdateCreatedAt() *DeployedCoinUpsert {
	u.SetExcluded(deployedcoin.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DeployedCoinUpsert) AddCreatedAt(v uint32) *DeployedCoinUpsert {
	u.Add(deployedcoin.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeployedCoinUpsert) SetUpdatedAt(v uint32) *DeployedCoinUpsert {
	u.Set(deployedcoin.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeployedCoinUpsert) UpdateUpdatedAt() *DeployedCoinUpsert {
	u.SetExcluded(deployedcoin.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DeployedCoinUpsert) AddUpdatedAt(v uint32) *DeployedCoinUpsert {
	u.Add(deployedcoin.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeployedCoinUpsert) SetDeletedAt(v uint32) *DeployedCoinUpsert {
	u.Set(deployedcoin.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeployedCoinUpsert) UpdateDeletedAt() *DeployedCoinUpsert {
	u.SetExcluded(deployedcoin.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DeployedCoinUpsert) AddDeletedAt(v uint32) *DeployedCoinUpsert {
	u.Add(deployedcoin.FieldDeletedAt, v)
	return u
}

// SetCoinID sets the "coin_id" field.
func (u *DeployedCoinUpsert) SetCoinID(v uuid.UUID) *DeployedCoinUpsert {
	u.Set(deployedcoin.FieldCoinID, v)
	return u
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *DeployedCoinUpsert) UpdateCoinID() *DeployedCoinUpsert {
	u.SetExcluded(deployedcoin.FieldCoinID)
	return u
}

// SetContract sets the "contract" field.
func (u *DeployedCoinUpsert) SetContract(v string) *DeployedCoinUpsert {
	u.Set(deployedcoin.FieldContract, v)
	return u
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *DeployedCoinUpsert) UpdateContract() *DeployedCoinUpsert {
	u.SetExcluded(deployedcoin.FieldContract)
	return u
}

// ClearContract clears the value of the "contract" field.
func (u *DeployedCoinUpsert) ClearContract() *DeployedCoinUpsert {
	u.SetNull(deployedcoin.FieldContract)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeployedCoin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deployedcoin.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeployedCoinUpsertOne) UpdateNewValues() *DeployedCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deployedcoin.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DeployedCoin.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DeployedCoinUpsertOne) Ignore() *DeployedCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeployedCoinUpsertOne) DoNothing() *DeployedCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeployedCoinCreate.OnConflict
// documentation for more info.
func (u *DeployedCoinUpsertOne) Update(set func(*DeployedCoinUpsert)) *DeployedCoinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeployedCoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeployedCoinUpsertOne) SetCreatedAt(v uint32) *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DeployedCoinUpsertOne) AddCreatedAt(v uint32) *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeployedCoinUpsertOne) UpdateCreatedAt() *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeployedCoinUpsertOne) SetUpdatedAt(v uint32) *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DeployedCoinUpsertOne) AddUpdatedAt(v uint32) *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeployedCoinUpsertOne) UpdateUpdatedAt() *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeployedCoinUpsertOne) SetDeletedAt(v uint32) *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DeployedCoinUpsertOne) AddDeletedAt(v uint32) *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeployedCoinUpsertOne) UpdateDeletedAt() *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinID sets the "coin_id" field.
func (u *DeployedCoinUpsertOne) SetCoinID(v uuid.UUID) *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetCoinID(v)
	})
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *DeployedCoinUpsertOne) UpdateCoinID() *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateCoinID()
	})
}

// SetContract sets the "contract" field.
func (u *DeployedCoinUpsertOne) SetContract(v string) *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetContract(v)
	})
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *DeployedCoinUpsertOne) UpdateContract() *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateContract()
	})
}

// ClearContract clears the value of the "contract" field.
func (u *DeployedCoinUpsertOne) ClearContract() *DeployedCoinUpsertOne {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.ClearContract()
	})
}

// Exec executes the query.
func (u *DeployedCoinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeployedCoinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeployedCoinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeployedCoinUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeployedCoinUpsertOne.ID is not supported by MySQL driver. Use DeployedCoinUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeployedCoinUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeployedCoinCreateBulk is the builder for creating many DeployedCoin entities in bulk.
type DeployedCoinCreateBulk struct {
	config
	builders []*DeployedCoinCreate
	conflict []sql.ConflictOption
}

// Save creates the DeployedCoin entities in the database.
func (dccb *DeployedCoinCreateBulk) Save(ctx context.Context) ([]*DeployedCoin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DeployedCoin, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeployedCoinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DeployedCoinCreateBulk) SaveX(ctx context.Context) []*DeployedCoin {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DeployedCoinCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DeployedCoinCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeployedCoin.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeployedCoinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (dccb *DeployedCoinCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeployedCoinUpsertBulk {
	dccb.conflict = opts
	return &DeployedCoinUpsertBulk{
		create: dccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeployedCoin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dccb *DeployedCoinCreateBulk) OnConflictColumns(columns ...string) *DeployedCoinUpsertBulk {
	dccb.conflict = append(dccb.conflict, sql.ConflictColumns(columns...))
	return &DeployedCoinUpsertBulk{
		create: dccb,
	}
}

// DeployedCoinUpsertBulk is the builder for "upsert"-ing
// a bulk of DeployedCoin nodes.
type DeployedCoinUpsertBulk struct {
	create *DeployedCoinCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeployedCoin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deployedcoin.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeployedCoinUpsertBulk) UpdateNewValues() *DeployedCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deployedcoin.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeployedCoin.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DeployedCoinUpsertBulk) Ignore() *DeployedCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeployedCoinUpsertBulk) DoNothing() *DeployedCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeployedCoinCreateBulk.OnConflict
// documentation for more info.
func (u *DeployedCoinUpsertBulk) Update(set func(*DeployedCoinUpsert)) *DeployedCoinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeployedCoinUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *DeployedCoinUpsertBulk) SetCreatedAt(v uint32) *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *DeployedCoinUpsertBulk) AddCreatedAt(v uint32) *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *DeployedCoinUpsertBulk) UpdateCreatedAt() *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DeployedCoinUpsertBulk) SetUpdatedAt(v uint32) *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *DeployedCoinUpsertBulk) AddUpdatedAt(v uint32) *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DeployedCoinUpsertBulk) UpdateUpdatedAt() *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DeployedCoinUpsertBulk) SetDeletedAt(v uint32) *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *DeployedCoinUpsertBulk) AddDeletedAt(v uint32) *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DeployedCoinUpsertBulk) UpdateDeletedAt() *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinID sets the "coin_id" field.
func (u *DeployedCoinUpsertBulk) SetCoinID(v uuid.UUID) *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetCoinID(v)
	})
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *DeployedCoinUpsertBulk) UpdateCoinID() *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateCoinID()
	})
}

// SetContract sets the "contract" field.
func (u *DeployedCoinUpsertBulk) SetContract(v string) *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.SetContract(v)
	})
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *DeployedCoinUpsertBulk) UpdateContract() *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.UpdateContract()
	})
}

// ClearContract clears the value of the "contract" field.
func (u *DeployedCoinUpsertBulk) ClearContract() *DeployedCoinUpsertBulk {
	return u.Update(func(s *DeployedCoinUpsert) {
		s.ClearContract()
	})
}

// Exec executes the query.
func (u *DeployedCoinUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeployedCoinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeployedCoinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeployedCoinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
