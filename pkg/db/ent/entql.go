// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/tokeninfo"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tokeninfo.Table,
			Columns: tokeninfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: tokeninfo.FieldID,
			},
		},
		Type: "TokenInfo",
		Fields: map[string]*sqlgraph.FieldSpec{
			tokeninfo.FieldEntID:            {Type: field.TypeUUID, Column: tokeninfo.FieldEntID},
			tokeninfo.FieldCreatedAt:        {Type: field.TypeUint32, Column: tokeninfo.FieldCreatedAt},
			tokeninfo.FieldUpdatedAt:        {Type: field.TypeUint32, Column: tokeninfo.FieldUpdatedAt},
			tokeninfo.FieldDeletedAt:        {Type: field.TypeUint32, Column: tokeninfo.FieldDeletedAt},
			tokeninfo.FieldName:             {Type: field.TypeString, Column: tokeninfo.FieldName},
			tokeninfo.FieldChainType:        {Type: field.TypeString, Column: tokeninfo.FieldChainType},
			tokeninfo.FieldTokenType:        {Type: field.TypeString, Column: tokeninfo.FieldTokenType},
			tokeninfo.FieldUnit:             {Type: field.TypeString, Column: tokeninfo.FieldUnit},
			tokeninfo.FieldDecimal:          {Type: field.TypeString, Column: tokeninfo.FieldDecimal},
			tokeninfo.FieldOfficialContract: {Type: field.TypeString, Column: tokeninfo.FieldOfficialContract},
			tokeninfo.FieldPrivateContract:  {Type: field.TypeString, Column: tokeninfo.FieldPrivateContract},
			tokeninfo.FieldRemark:           {Type: field.TypeString, Column: tokeninfo.FieldRemark},
			tokeninfo.FieldData:             {Type: field.TypeBytes, Column: tokeninfo.FieldData},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (tiq *TokenInfoQuery) addPredicate(pred func(s *sql.Selector)) {
	tiq.predicates = append(tiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TokenInfoQuery builder.
func (tiq *TokenInfoQuery) Filter() *TokenInfoFilter {
	return &TokenInfoFilter{config: tiq.config, predicateAdder: tiq}
}

// addPredicate implements the predicateAdder interface.
func (m *TokenInfoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TokenInfoMutation builder.
func (m *TokenInfoMutation) Filter() *TokenInfoFilter {
	return &TokenInfoFilter{config: m.config, predicateAdder: m}
}

// TokenInfoFilter provides a generic filtering capability at runtime for TokenInfoQuery.
type TokenInfoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TokenInfoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *TokenInfoFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(tokeninfo.FieldID))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *TokenInfoFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(tokeninfo.FieldEntID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *TokenInfoFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(tokeninfo.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *TokenInfoFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(tokeninfo.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *TokenInfoFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(tokeninfo.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *TokenInfoFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tokeninfo.FieldName))
}

// WhereChainType applies the entql string predicate on the chain_type field.
func (f *TokenInfoFilter) WhereChainType(p entql.StringP) {
	f.Where(p.Field(tokeninfo.FieldChainType))
}

// WhereTokenType applies the entql string predicate on the token_type field.
func (f *TokenInfoFilter) WhereTokenType(p entql.StringP) {
	f.Where(p.Field(tokeninfo.FieldTokenType))
}

// WhereUnit applies the entql string predicate on the unit field.
func (f *TokenInfoFilter) WhereUnit(p entql.StringP) {
	f.Where(p.Field(tokeninfo.FieldUnit))
}

// WhereDecimal applies the entql string predicate on the decimal field.
func (f *TokenInfoFilter) WhereDecimal(p entql.StringP) {
	f.Where(p.Field(tokeninfo.FieldDecimal))
}

// WhereOfficialContract applies the entql string predicate on the official_contract field.
func (f *TokenInfoFilter) WhereOfficialContract(p entql.StringP) {
	f.Where(p.Field(tokeninfo.FieldOfficialContract))
}

// WherePrivateContract applies the entql string predicate on the private_contract field.
func (f *TokenInfoFilter) WherePrivateContract(p entql.StringP) {
	f.Where(p.Field(tokeninfo.FieldPrivateContract))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *TokenInfoFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(tokeninfo.FieldRemark))
}

// WhereData applies the entql []byte predicate on the data field.
func (f *TokenInfoFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(tokeninfo.FieldData))
}
