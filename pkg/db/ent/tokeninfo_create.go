// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/tokeninfo"
	"github.com/google/uuid"
)

// TokenInfoCreate is the builder for creating a TokenInfo entity.
type TokenInfoCreate struct {
	config
	mutation *TokenInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tic *TokenInfoCreate) SetCreatedAt(u uint32) *TokenInfoCreate {
	tic.mutation.SetCreatedAt(u)
	return tic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableCreatedAt(u *uint32) *TokenInfoCreate {
	if u != nil {
		tic.SetCreatedAt(*u)
	}
	return tic
}

// SetUpdatedAt sets the "updated_at" field.
func (tic *TokenInfoCreate) SetUpdatedAt(u uint32) *TokenInfoCreate {
	tic.mutation.SetUpdatedAt(u)
	return tic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableUpdatedAt(u *uint32) *TokenInfoCreate {
	if u != nil {
		tic.SetUpdatedAt(*u)
	}
	return tic
}

// SetDeletedAt sets the "deleted_at" field.
func (tic *TokenInfoCreate) SetDeletedAt(u uint32) *TokenInfoCreate {
	tic.mutation.SetDeletedAt(u)
	return tic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableDeletedAt(u *uint32) *TokenInfoCreate {
	if u != nil {
		tic.SetDeletedAt(*u)
	}
	return tic
}

// SetName sets the "name" field.
func (tic *TokenInfoCreate) SetName(s string) *TokenInfoCreate {
	tic.mutation.SetName(s)
	return tic
}

// SetChainType sets the "chain_type" field.
func (tic *TokenInfoCreate) SetChainType(s string) *TokenInfoCreate {
	tic.mutation.SetChainType(s)
	return tic
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableChainType(s *string) *TokenInfoCreate {
	if s != nil {
		tic.SetChainType(*s)
	}
	return tic
}

// SetTokenType sets the "token_type" field.
func (tic *TokenInfoCreate) SetTokenType(s string) *TokenInfoCreate {
	tic.mutation.SetTokenType(s)
	return tic
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableTokenType(s *string) *TokenInfoCreate {
	if s != nil {
		tic.SetTokenType(*s)
	}
	return tic
}

// SetUnit sets the "unit" field.
func (tic *TokenInfoCreate) SetUnit(s string) *TokenInfoCreate {
	tic.mutation.SetUnit(s)
	return tic
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableUnit(s *string) *TokenInfoCreate {
	if s != nil {
		tic.SetUnit(*s)
	}
	return tic
}

// SetDecimal sets the "decimal" field.
func (tic *TokenInfoCreate) SetDecimal(s string) *TokenInfoCreate {
	tic.mutation.SetDecimal(s)
	return tic
}

// SetNillableDecimal sets the "decimal" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableDecimal(s *string) *TokenInfoCreate {
	if s != nil {
		tic.SetDecimal(*s)
	}
	return tic
}

// SetOfficialContract sets the "official_contract" field.
func (tic *TokenInfoCreate) SetOfficialContract(s string) *TokenInfoCreate {
	tic.mutation.SetOfficialContract(s)
	return tic
}

// SetPrivateContract sets the "private_contract" field.
func (tic *TokenInfoCreate) SetPrivateContract(s string) *TokenInfoCreate {
	tic.mutation.SetPrivateContract(s)
	return tic
}

// SetRemark sets the "remark" field.
func (tic *TokenInfoCreate) SetRemark(s string) *TokenInfoCreate {
	tic.mutation.SetRemark(s)
	return tic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableRemark(s *string) *TokenInfoCreate {
	if s != nil {
		tic.SetRemark(*s)
	}
	return tic
}

// SetData sets the "data" field.
func (tic *TokenInfoCreate) SetData(b []byte) *TokenInfoCreate {
	tic.mutation.SetData(b)
	return tic
}

// SetID sets the "id" field.
func (tic *TokenInfoCreate) SetID(u uuid.UUID) *TokenInfoCreate {
	tic.mutation.SetID(u)
	return tic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tic *TokenInfoCreate) SetNillableID(u *uuid.UUID) *TokenInfoCreate {
	if u != nil {
		tic.SetID(*u)
	}
	return tic
}

// Mutation returns the TokenInfoMutation object of the builder.
func (tic *TokenInfoCreate) Mutation() *TokenInfoMutation {
	return tic.mutation
}

// Save creates the TokenInfo in the database.
func (tic *TokenInfoCreate) Save(ctx context.Context) (*TokenInfo, error) {
	var (
		err  error
		node *TokenInfo
	)
	if err := tic.defaults(); err != nil {
		return nil, err
	}
	if len(tic.hooks) == 0 {
		if err = tic.check(); err != nil {
			return nil, err
		}
		node, err = tic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TokenInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tic.check(); err != nil {
				return nil, err
			}
			tic.mutation = mutation
			if node, err = tic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tic.hooks) - 1; i >= 0; i-- {
			if tic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TokenInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TokenInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TokenInfoCreate) SaveX(ctx context.Context) *TokenInfo {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TokenInfoCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TokenInfoCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *TokenInfoCreate) defaults() error {
	if _, ok := tic.mutation.CreatedAt(); !ok {
		if tokeninfo.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized tokeninfo.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := tokeninfo.DefaultCreatedAt()
		tic.mutation.SetCreatedAt(v)
	}
	if _, ok := tic.mutation.UpdatedAt(); !ok {
		if tokeninfo.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized tokeninfo.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := tokeninfo.DefaultUpdatedAt()
		tic.mutation.SetUpdatedAt(v)
	}
	if _, ok := tic.mutation.DeletedAt(); !ok {
		if tokeninfo.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized tokeninfo.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := tokeninfo.DefaultDeletedAt()
		tic.mutation.SetDeletedAt(v)
	}
	if _, ok := tic.mutation.ChainType(); !ok {
		v := tokeninfo.DefaultChainType
		tic.mutation.SetChainType(v)
	}
	if _, ok := tic.mutation.TokenType(); !ok {
		v := tokeninfo.DefaultTokenType
		tic.mutation.SetTokenType(v)
	}
	if _, ok := tic.mutation.Unit(); !ok {
		v := tokeninfo.DefaultUnit
		tic.mutation.SetUnit(v)
	}
	if _, ok := tic.mutation.Decimal(); !ok {
		v := tokeninfo.DefaultDecimal
		tic.mutation.SetDecimal(v)
	}
	if _, ok := tic.mutation.Remark(); !ok {
		v := tokeninfo.DefaultRemark
		tic.mutation.SetRemark(v)
	}
	if _, ok := tic.mutation.ID(); !ok {
		if tokeninfo.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized tokeninfo.DefaultID (forgotten import ent/runtime?)")
		}
		v := tokeninfo.DefaultID()
		tic.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tic *TokenInfoCreate) check() error {
	if _, ok := tic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TokenInfo.created_at"`)}
	}
	if _, ok := tic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TokenInfo.updated_at"`)}
	}
	if _, ok := tic.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "TokenInfo.deleted_at"`)}
	}
	if _, ok := tic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TokenInfo.name"`)}
	}
	if _, ok := tic.mutation.OfficialContract(); !ok {
		return &ValidationError{Name: "official_contract", err: errors.New(`ent: missing required field "TokenInfo.official_contract"`)}
	}
	if _, ok := tic.mutation.PrivateContract(); !ok {
		return &ValidationError{Name: "private_contract", err: errors.New(`ent: missing required field "TokenInfo.private_contract"`)}
	}
	return nil
}

func (tic *TokenInfoCreate) sqlSave(ctx context.Context) (*TokenInfo, error) {
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tic *TokenInfoCreate) createSpec() (*TokenInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenInfo{config: tic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tokeninfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tokeninfo.FieldID,
			},
		}
	)
	_spec.OnConflict = tic.conflict
	if id, ok := tic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tic.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := tic.mutation.TokenType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldTokenType,
		})
		_node.TokenType = value
	}
	if value, ok := tic.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := tic.mutation.Decimal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldDecimal,
		})
		_node.Decimal = value
	}
	if value, ok := tic.mutation.OfficialContract(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldOfficialContract,
		})
		_node.OfficialContract = value
	}
	if value, ok := tic.mutation.PrivateContract(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldPrivateContract,
		})
		_node.PrivateContract = value
	}
	if value, ok := tic.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := tic.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tokeninfo.FieldData,
		})
		_node.Data = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TokenInfo.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TokenInfoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (tic *TokenInfoCreate) OnConflict(opts ...sql.ConflictOption) *TokenInfoUpsertOne {
	tic.conflict = opts
	return &TokenInfoUpsertOne{
		create: tic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TokenInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tic *TokenInfoCreate) OnConflictColumns(columns ...string) *TokenInfoUpsertOne {
	tic.conflict = append(tic.conflict, sql.ConflictColumns(columns...))
	return &TokenInfoUpsertOne{
		create: tic,
	}
}

type (
	// TokenInfoUpsertOne is the builder for "upsert"-ing
	//  one TokenInfo node.
	TokenInfoUpsertOne struct {
		create *TokenInfoCreate
	}

	// TokenInfoUpsert is the "OnConflict" setter.
	TokenInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TokenInfoUpsert) SetCreatedAt(v uint32) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateCreatedAt() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TokenInfoUpsert) AddCreatedAt(v uint32) *TokenInfoUpsert {
	u.Add(tokeninfo.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenInfoUpsert) SetUpdatedAt(v uint32) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateUpdatedAt() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TokenInfoUpsert) AddUpdatedAt(v uint32) *TokenInfoUpsert {
	u.Add(tokeninfo.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TokenInfoUpsert) SetDeletedAt(v uint32) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateDeletedAt() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TokenInfoUpsert) AddDeletedAt(v uint32) *TokenInfoUpsert {
	u.Add(tokeninfo.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *TokenInfoUpsert) SetName(v string) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateName() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldName)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *TokenInfoUpsert) SetChainType(v string) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateChainType() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldChainType)
	return u
}

// ClearChainType clears the value of the "chain_type" field.
func (u *TokenInfoUpsert) ClearChainType() *TokenInfoUpsert {
	u.SetNull(tokeninfo.FieldChainType)
	return u
}

// SetTokenType sets the "token_type" field.
func (u *TokenInfoUpsert) SetTokenType(v string) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldTokenType, v)
	return u
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateTokenType() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldTokenType)
	return u
}

// ClearTokenType clears the value of the "token_type" field.
func (u *TokenInfoUpsert) ClearTokenType() *TokenInfoUpsert {
	u.SetNull(tokeninfo.FieldTokenType)
	return u
}

// SetUnit sets the "unit" field.
func (u *TokenInfoUpsert) SetUnit(v string) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldUnit, v)
	return u
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateUnit() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldUnit)
	return u
}

// ClearUnit clears the value of the "unit" field.
func (u *TokenInfoUpsert) ClearUnit() *TokenInfoUpsert {
	u.SetNull(tokeninfo.FieldUnit)
	return u
}

// SetDecimal sets the "decimal" field.
func (u *TokenInfoUpsert) SetDecimal(v string) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldDecimal, v)
	return u
}

// UpdateDecimal sets the "decimal" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateDecimal() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldDecimal)
	return u
}

// ClearDecimal clears the value of the "decimal" field.
func (u *TokenInfoUpsert) ClearDecimal() *TokenInfoUpsert {
	u.SetNull(tokeninfo.FieldDecimal)
	return u
}

// SetOfficialContract sets the "official_contract" field.
func (u *TokenInfoUpsert) SetOfficialContract(v string) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldOfficialContract, v)
	return u
}

// UpdateOfficialContract sets the "official_contract" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateOfficialContract() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldOfficialContract)
	return u
}

// SetPrivateContract sets the "private_contract" field.
func (u *TokenInfoUpsert) SetPrivateContract(v string) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldPrivateContract, v)
	return u
}

// UpdatePrivateContract sets the "private_contract" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdatePrivateContract() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldPrivateContract)
	return u
}

// SetRemark sets the "remark" field.
func (u *TokenInfoUpsert) SetRemark(v string) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateRemark() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TokenInfoUpsert) ClearRemark() *TokenInfoUpsert {
	u.SetNull(tokeninfo.FieldRemark)
	return u
}

// SetData sets the "data" field.
func (u *TokenInfoUpsert) SetData(v []byte) *TokenInfoUpsert {
	u.Set(tokeninfo.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TokenInfoUpsert) UpdateData() *TokenInfoUpsert {
	u.SetExcluded(tokeninfo.FieldData)
	return u
}

// ClearData clears the value of the "data" field.
func (u *TokenInfoUpsert) ClearData() *TokenInfoUpsert {
	u.SetNull(tokeninfo.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TokenInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tokeninfo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TokenInfoUpsertOne) UpdateNewValues() *TokenInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tokeninfo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TokenInfo.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TokenInfoUpsertOne) Ignore() *TokenInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TokenInfoUpsertOne) DoNothing() *TokenInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TokenInfoCreate.OnConflict
// documentation for more info.
func (u *TokenInfoUpsertOne) Update(set func(*TokenInfoUpsert)) *TokenInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TokenInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TokenInfoUpsertOne) SetCreatedAt(v uint32) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TokenInfoUpsertOne) AddCreatedAt(v uint32) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateCreatedAt() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenInfoUpsertOne) SetUpdatedAt(v uint32) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TokenInfoUpsertOne) AddUpdatedAt(v uint32) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateUpdatedAt() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TokenInfoUpsertOne) SetDeletedAt(v uint32) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TokenInfoUpsertOne) AddDeletedAt(v uint32) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateDeletedAt() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *TokenInfoUpsertOne) SetName(v string) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateName() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateName()
	})
}

// SetChainType sets the "chain_type" field.
func (u *TokenInfoUpsertOne) SetChainType(v string) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateChainType() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateChainType()
	})
}

// ClearChainType clears the value of the "chain_type" field.
func (u *TokenInfoUpsertOne) ClearChainType() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearChainType()
	})
}

// SetTokenType sets the "token_type" field.
func (u *TokenInfoUpsertOne) SetTokenType(v string) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateTokenType() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateTokenType()
	})
}

// ClearTokenType clears the value of the "token_type" field.
func (u *TokenInfoUpsertOne) ClearTokenType() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearTokenType()
	})
}

// SetUnit sets the "unit" field.
func (u *TokenInfoUpsertOne) SetUnit(v string) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateUnit() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateUnit()
	})
}

// ClearUnit clears the value of the "unit" field.
func (u *TokenInfoUpsertOne) ClearUnit() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearUnit()
	})
}

// SetDecimal sets the "decimal" field.
func (u *TokenInfoUpsertOne) SetDecimal(v string) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetDecimal(v)
	})
}

// UpdateDecimal sets the "decimal" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateDecimal() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateDecimal()
	})
}

// ClearDecimal clears the value of the "decimal" field.
func (u *TokenInfoUpsertOne) ClearDecimal() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearDecimal()
	})
}

// SetOfficialContract sets the "official_contract" field.
func (u *TokenInfoUpsertOne) SetOfficialContract(v string) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetOfficialContract(v)
	})
}

// UpdateOfficialContract sets the "official_contract" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateOfficialContract() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateOfficialContract()
	})
}

// SetPrivateContract sets the "private_contract" field.
func (u *TokenInfoUpsertOne) SetPrivateContract(v string) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetPrivateContract(v)
	})
}

// UpdatePrivateContract sets the "private_contract" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdatePrivateContract() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdatePrivateContract()
	})
}

// SetRemark sets the "remark" field.
func (u *TokenInfoUpsertOne) SetRemark(v string) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateRemark() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TokenInfoUpsertOne) ClearRemark() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearRemark()
	})
}

// SetData sets the "data" field.
func (u *TokenInfoUpsertOne) SetData(v []byte) *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TokenInfoUpsertOne) UpdateData() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *TokenInfoUpsertOne) ClearData() *TokenInfoUpsertOne {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearData()
	})
}

// Exec executes the query.
func (u *TokenInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TokenInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TokenInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TokenInfoUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TokenInfoUpsertOne.ID is not supported by MySQL driver. Use TokenInfoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TokenInfoUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TokenInfoCreateBulk is the builder for creating many TokenInfo entities in bulk.
type TokenInfoCreateBulk struct {
	config
	builders []*TokenInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the TokenInfo entities in the database.
func (ticb *TokenInfoCreateBulk) Save(ctx context.Context) ([]*TokenInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TokenInfo, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ticb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TokenInfoCreateBulk) SaveX(ctx context.Context) []*TokenInfo {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TokenInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TokenInfoCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TokenInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TokenInfoUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ticb *TokenInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *TokenInfoUpsertBulk {
	ticb.conflict = opts
	return &TokenInfoUpsertBulk{
		create: ticb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TokenInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ticb *TokenInfoCreateBulk) OnConflictColumns(columns ...string) *TokenInfoUpsertBulk {
	ticb.conflict = append(ticb.conflict, sql.ConflictColumns(columns...))
	return &TokenInfoUpsertBulk{
		create: ticb,
	}
}

// TokenInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of TokenInfo nodes.
type TokenInfoUpsertBulk struct {
	create *TokenInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TokenInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tokeninfo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TokenInfoUpsertBulk) UpdateNewValues() *TokenInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tokeninfo.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TokenInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TokenInfoUpsertBulk) Ignore() *TokenInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TokenInfoUpsertBulk) DoNothing() *TokenInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TokenInfoCreateBulk.OnConflict
// documentation for more info.
func (u *TokenInfoUpsertBulk) Update(set func(*TokenInfoUpsert)) *TokenInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TokenInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TokenInfoUpsertBulk) SetCreatedAt(v uint32) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TokenInfoUpsertBulk) AddCreatedAt(v uint32) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateCreatedAt() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TokenInfoUpsertBulk) SetUpdatedAt(v uint32) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TokenInfoUpsertBulk) AddUpdatedAt(v uint32) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateUpdatedAt() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TokenInfoUpsertBulk) SetDeletedAt(v uint32) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TokenInfoUpsertBulk) AddDeletedAt(v uint32) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateDeletedAt() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *TokenInfoUpsertBulk) SetName(v string) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateName() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateName()
	})
}

// SetChainType sets the "chain_type" field.
func (u *TokenInfoUpsertBulk) SetChainType(v string) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateChainType() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateChainType()
	})
}

// ClearChainType clears the value of the "chain_type" field.
func (u *TokenInfoUpsertBulk) ClearChainType() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearChainType()
	})
}

// SetTokenType sets the "token_type" field.
func (u *TokenInfoUpsertBulk) SetTokenType(v string) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetTokenType(v)
	})
}

// UpdateTokenType sets the "token_type" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateTokenType() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateTokenType()
	})
}

// ClearTokenType clears the value of the "token_type" field.
func (u *TokenInfoUpsertBulk) ClearTokenType() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearTokenType()
	})
}

// SetUnit sets the "unit" field.
func (u *TokenInfoUpsertBulk) SetUnit(v string) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateUnit() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateUnit()
	})
}

// ClearUnit clears the value of the "unit" field.
func (u *TokenInfoUpsertBulk) ClearUnit() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearUnit()
	})
}

// SetDecimal sets the "decimal" field.
func (u *TokenInfoUpsertBulk) SetDecimal(v string) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetDecimal(v)
	})
}

// UpdateDecimal sets the "decimal" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateDecimal() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateDecimal()
	})
}

// ClearDecimal clears the value of the "decimal" field.
func (u *TokenInfoUpsertBulk) ClearDecimal() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearDecimal()
	})
}

// SetOfficialContract sets the "official_contract" field.
func (u *TokenInfoUpsertBulk) SetOfficialContract(v string) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetOfficialContract(v)
	})
}

// UpdateOfficialContract sets the "official_contract" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateOfficialContract() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateOfficialContract()
	})
}

// SetPrivateContract sets the "private_contract" field.
func (u *TokenInfoUpsertBulk) SetPrivateContract(v string) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetPrivateContract(v)
	})
}

// UpdatePrivateContract sets the "private_contract" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdatePrivateContract() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdatePrivateContract()
	})
}

// SetRemark sets the "remark" field.
func (u *TokenInfoUpsertBulk) SetRemark(v string) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateRemark() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TokenInfoUpsertBulk) ClearRemark() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearRemark()
	})
}

// SetData sets the "data" field.
func (u *TokenInfoUpsertBulk) SetData(v []byte) *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TokenInfoUpsertBulk) UpdateData() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *TokenInfoUpsertBulk) ClearData() *TokenInfoUpsertBulk {
	return u.Update(func(s *TokenInfoUpsert) {
		s.ClearData()
	})
}

// Exec executes the query.
func (u *TokenInfoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TokenInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TokenInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TokenInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
