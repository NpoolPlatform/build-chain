// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/tokeninfo"
	"github.com/google/uuid"
)

// TokenInfo is the model entity for the TokenInfo schema.
type TokenInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ChainType holds the value of the "chain_type" field.
	ChainType string `json:"chain_type,omitempty"`
	// TokenType holds the value of the "token_type" field.
	TokenType string `json:"token_type,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// Decimal holds the value of the "decimal" field.
	Decimal string `json:"decimal,omitempty"`
	// OfficialContract holds the value of the "official_contract" field.
	OfficialContract string `json:"official_contract,omitempty"`
	// PrivateContract holds the value of the "private_contract" field.
	PrivateContract string `json:"private_contract,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Data holds the value of the "data" field.
	Data []byte `json:"data,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TokenInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tokeninfo.FieldData:
			values[i] = new([]byte)
		case tokeninfo.FieldCreatedAt, tokeninfo.FieldUpdatedAt, tokeninfo.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case tokeninfo.FieldName, tokeninfo.FieldChainType, tokeninfo.FieldTokenType, tokeninfo.FieldUnit, tokeninfo.FieldDecimal, tokeninfo.FieldOfficialContract, tokeninfo.FieldPrivateContract, tokeninfo.FieldRemark:
			values[i] = new(sql.NullString)
		case tokeninfo.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TokenInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TokenInfo fields.
func (ti *TokenInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tokeninfo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ti.ID = *value
			}
		case tokeninfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ti.CreatedAt = uint32(value.Int64)
			}
		case tokeninfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ti.UpdatedAt = uint32(value.Int64)
			}
		case tokeninfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ti.DeletedAt = uint32(value.Int64)
			}
		case tokeninfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ti.Name = value.String
			}
		case tokeninfo.FieldChainType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_type", values[i])
			} else if value.Valid {
				ti.ChainType = value.String
			}
		case tokeninfo.FieldTokenType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_type", values[i])
			} else if value.Valid {
				ti.TokenType = value.String
			}
		case tokeninfo.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				ti.Unit = value.String
			}
		case tokeninfo.FieldDecimal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field decimal", values[i])
			} else if value.Valid {
				ti.Decimal = value.String
			}
		case tokeninfo.FieldOfficialContract:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field official_contract", values[i])
			} else if value.Valid {
				ti.OfficialContract = value.String
			}
		case tokeninfo.FieldPrivateContract:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_contract", values[i])
			} else if value.Valid {
				ti.PrivateContract = value.String
			}
		case tokeninfo.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ti.Remark = value.String
			}
		case tokeninfo.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				ti.Data = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TokenInfo.
// Note that you need to call TokenInfo.Unwrap() before calling this method if this TokenInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TokenInfo) Update() *TokenInfoUpdateOne {
	return (&TokenInfoClient{config: ti.config}).UpdateOne(ti)
}

// Unwrap unwraps the TokenInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TokenInfo) Unwrap() *TokenInfo {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TokenInfo is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TokenInfo) String() string {
	var builder strings.Builder
	builder.WriteString("TokenInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ti.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ti.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ti.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ti.Name)
	builder.WriteString(", ")
	builder.WriteString("chain_type=")
	builder.WriteString(ti.ChainType)
	builder.WriteString(", ")
	builder.WriteString("token_type=")
	builder.WriteString(ti.TokenType)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(ti.Unit)
	builder.WriteString(", ")
	builder.WriteString("decimal=")
	builder.WriteString(ti.Decimal)
	builder.WriteString(", ")
	builder.WriteString("official_contract=")
	builder.WriteString(ti.OfficialContract)
	builder.WriteString(", ")
	builder.WriteString("private_contract=")
	builder.WriteString(ti.PrivateContract)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ti.Remark)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", ti.Data))
	builder.WriteByte(')')
	return builder.String()
}

// TokenInfos is a parsable slice of TokenInfo.
type TokenInfos []*TokenInfo

func (ti TokenInfos) config(cfg config) {
	for _i := range ti {
		ti[_i].config = cfg
	}
}
