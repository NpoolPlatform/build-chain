// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/tokeninfo"
)

// TokenInfoUpdate is the builder for updating TokenInfo entities.
type TokenInfoUpdate struct {
	config
	hooks     []Hook
	mutation  *TokenInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TokenInfoUpdate builder.
func (tiu *TokenInfoUpdate) Where(ps ...predicate.TokenInfo) *TokenInfoUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetCreatedAt sets the "created_at" field.
func (tiu *TokenInfoUpdate) SetCreatedAt(u uint32) *TokenInfoUpdate {
	tiu.mutation.ResetCreatedAt()
	tiu.mutation.SetCreatedAt(u)
	return tiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiu *TokenInfoUpdate) SetNillableCreatedAt(u *uint32) *TokenInfoUpdate {
	if u != nil {
		tiu.SetCreatedAt(*u)
	}
	return tiu
}

// AddCreatedAt adds u to the "created_at" field.
func (tiu *TokenInfoUpdate) AddCreatedAt(u int32) *TokenInfoUpdate {
	tiu.mutation.AddCreatedAt(u)
	return tiu
}

// SetUpdatedAt sets the "updated_at" field.
func (tiu *TokenInfoUpdate) SetUpdatedAt(u uint32) *TokenInfoUpdate {
	tiu.mutation.ResetUpdatedAt()
	tiu.mutation.SetUpdatedAt(u)
	return tiu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tiu *TokenInfoUpdate) AddUpdatedAt(u int32) *TokenInfoUpdate {
	tiu.mutation.AddUpdatedAt(u)
	return tiu
}

// SetDeletedAt sets the "deleted_at" field.
func (tiu *TokenInfoUpdate) SetDeletedAt(u uint32) *TokenInfoUpdate {
	tiu.mutation.ResetDeletedAt()
	tiu.mutation.SetDeletedAt(u)
	return tiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tiu *TokenInfoUpdate) SetNillableDeletedAt(u *uint32) *TokenInfoUpdate {
	if u != nil {
		tiu.SetDeletedAt(*u)
	}
	return tiu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tiu *TokenInfoUpdate) AddDeletedAt(u int32) *TokenInfoUpdate {
	tiu.mutation.AddDeletedAt(u)
	return tiu
}

// SetName sets the "name" field.
func (tiu *TokenInfoUpdate) SetName(s string) *TokenInfoUpdate {
	tiu.mutation.SetName(s)
	return tiu
}

// SetChainType sets the "chain_type" field.
func (tiu *TokenInfoUpdate) SetChainType(s string) *TokenInfoUpdate {
	tiu.mutation.SetChainType(s)
	return tiu
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (tiu *TokenInfoUpdate) SetNillableChainType(s *string) *TokenInfoUpdate {
	if s != nil {
		tiu.SetChainType(*s)
	}
	return tiu
}

// ClearChainType clears the value of the "chain_type" field.
func (tiu *TokenInfoUpdate) ClearChainType() *TokenInfoUpdate {
	tiu.mutation.ClearChainType()
	return tiu
}

// SetTokenType sets the "token_type" field.
func (tiu *TokenInfoUpdate) SetTokenType(s string) *TokenInfoUpdate {
	tiu.mutation.SetTokenType(s)
	return tiu
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (tiu *TokenInfoUpdate) SetNillableTokenType(s *string) *TokenInfoUpdate {
	if s != nil {
		tiu.SetTokenType(*s)
	}
	return tiu
}

// ClearTokenType clears the value of the "token_type" field.
func (tiu *TokenInfoUpdate) ClearTokenType() *TokenInfoUpdate {
	tiu.mutation.ClearTokenType()
	return tiu
}

// SetUnit sets the "unit" field.
func (tiu *TokenInfoUpdate) SetUnit(s string) *TokenInfoUpdate {
	tiu.mutation.SetUnit(s)
	return tiu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tiu *TokenInfoUpdate) SetNillableUnit(s *string) *TokenInfoUpdate {
	if s != nil {
		tiu.SetUnit(*s)
	}
	return tiu
}

// ClearUnit clears the value of the "unit" field.
func (tiu *TokenInfoUpdate) ClearUnit() *TokenInfoUpdate {
	tiu.mutation.ClearUnit()
	return tiu
}

// SetDecimal sets the "decimal" field.
func (tiu *TokenInfoUpdate) SetDecimal(s string) *TokenInfoUpdate {
	tiu.mutation.SetDecimal(s)
	return tiu
}

// SetNillableDecimal sets the "decimal" field if the given value is not nil.
func (tiu *TokenInfoUpdate) SetNillableDecimal(s *string) *TokenInfoUpdate {
	if s != nil {
		tiu.SetDecimal(*s)
	}
	return tiu
}

// ClearDecimal clears the value of the "decimal" field.
func (tiu *TokenInfoUpdate) ClearDecimal() *TokenInfoUpdate {
	tiu.mutation.ClearDecimal()
	return tiu
}

// SetOfficialContract sets the "official_contract" field.
func (tiu *TokenInfoUpdate) SetOfficialContract(s string) *TokenInfoUpdate {
	tiu.mutation.SetOfficialContract(s)
	return tiu
}

// SetPrivateContract sets the "private_contract" field.
func (tiu *TokenInfoUpdate) SetPrivateContract(s string) *TokenInfoUpdate {
	tiu.mutation.SetPrivateContract(s)
	return tiu
}

// SetRemark sets the "remark" field.
func (tiu *TokenInfoUpdate) SetRemark(s string) *TokenInfoUpdate {
	tiu.mutation.SetRemark(s)
	return tiu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tiu *TokenInfoUpdate) SetNillableRemark(s *string) *TokenInfoUpdate {
	if s != nil {
		tiu.SetRemark(*s)
	}
	return tiu
}

// ClearRemark clears the value of the "remark" field.
func (tiu *TokenInfoUpdate) ClearRemark() *TokenInfoUpdate {
	tiu.mutation.ClearRemark()
	return tiu
}

// SetData sets the "data" field.
func (tiu *TokenInfoUpdate) SetData(b []byte) *TokenInfoUpdate {
	tiu.mutation.SetData(b)
	return tiu
}

// ClearData clears the value of the "data" field.
func (tiu *TokenInfoUpdate) ClearData() *TokenInfoUpdate {
	tiu.mutation.ClearData()
	return tiu
}

// Mutation returns the TokenInfoMutation object of the builder.
func (tiu *TokenInfoUpdate) Mutation() *TokenInfoMutation {
	return tiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TokenInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tiu.defaults(); err != nil {
		return 0, err
	}
	if len(tiu.hooks) == 0 {
		affected, err = tiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TokenInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tiu.mutation = mutation
			affected, err = tiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tiu.hooks) - 1; i >= 0; i-- {
			if tiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TokenInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TokenInfoUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TokenInfoUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiu *TokenInfoUpdate) defaults() error {
	if _, ok := tiu.mutation.UpdatedAt(); !ok {
		if tokeninfo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized tokeninfo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := tokeninfo.UpdateDefaultUpdatedAt()
		tiu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tiu *TokenInfoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TokenInfoUpdate {
	tiu.modifiers = append(tiu.modifiers, modifiers...)
	return tiu
}

func (tiu *TokenInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tokeninfo.Table,
			Columns: tokeninfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tokeninfo.FieldID,
			},
		},
	}
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldCreatedAt,
		})
	}
	if value, ok := tiu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldCreatedAt,
		})
	}
	if value, ok := tiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldUpdatedAt,
		})
	}
	if value, ok := tiu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldUpdatedAt,
		})
	}
	if value, ok := tiu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldDeletedAt,
		})
	}
	if value, ok := tiu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldDeletedAt,
		})
	}
	if value, ok := tiu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldName,
		})
	}
	if value, ok := tiu.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldChainType,
		})
	}
	if tiu.mutation.ChainTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldChainType,
		})
	}
	if value, ok := tiu.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldTokenType,
		})
	}
	if tiu.mutation.TokenTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldTokenType,
		})
	}
	if value, ok := tiu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldUnit,
		})
	}
	if tiu.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldUnit,
		})
	}
	if value, ok := tiu.mutation.Decimal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldDecimal,
		})
	}
	if tiu.mutation.DecimalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldDecimal,
		})
	}
	if value, ok := tiu.mutation.OfficialContract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldOfficialContract,
		})
	}
	if value, ok := tiu.mutation.PrivateContract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldPrivateContract,
		})
	}
	if value, ok := tiu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldRemark,
		})
	}
	if tiu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldRemark,
		})
	}
	if value, ok := tiu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tokeninfo.FieldData,
		})
	}
	if tiu.mutation.DataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tokeninfo.FieldData,
		})
	}
	_spec.Modifiers = tiu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokeninfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TokenInfoUpdateOne is the builder for updating a single TokenInfo entity.
type TokenInfoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TokenInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tiuo *TokenInfoUpdateOne) SetCreatedAt(u uint32) *TokenInfoUpdateOne {
	tiuo.mutation.ResetCreatedAt()
	tiuo.mutation.SetCreatedAt(u)
	return tiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiuo *TokenInfoUpdateOne) SetNillableCreatedAt(u *uint32) *TokenInfoUpdateOne {
	if u != nil {
		tiuo.SetCreatedAt(*u)
	}
	return tiuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tiuo *TokenInfoUpdateOne) AddCreatedAt(u int32) *TokenInfoUpdateOne {
	tiuo.mutation.AddCreatedAt(u)
	return tiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tiuo *TokenInfoUpdateOne) SetUpdatedAt(u uint32) *TokenInfoUpdateOne {
	tiuo.mutation.ResetUpdatedAt()
	tiuo.mutation.SetUpdatedAt(u)
	return tiuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tiuo *TokenInfoUpdateOne) AddUpdatedAt(u int32) *TokenInfoUpdateOne {
	tiuo.mutation.AddUpdatedAt(u)
	return tiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tiuo *TokenInfoUpdateOne) SetDeletedAt(u uint32) *TokenInfoUpdateOne {
	tiuo.mutation.ResetDeletedAt()
	tiuo.mutation.SetDeletedAt(u)
	return tiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tiuo *TokenInfoUpdateOne) SetNillableDeletedAt(u *uint32) *TokenInfoUpdateOne {
	if u != nil {
		tiuo.SetDeletedAt(*u)
	}
	return tiuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tiuo *TokenInfoUpdateOne) AddDeletedAt(u int32) *TokenInfoUpdateOne {
	tiuo.mutation.AddDeletedAt(u)
	return tiuo
}

// SetName sets the "name" field.
func (tiuo *TokenInfoUpdateOne) SetName(s string) *TokenInfoUpdateOne {
	tiuo.mutation.SetName(s)
	return tiuo
}

// SetChainType sets the "chain_type" field.
func (tiuo *TokenInfoUpdateOne) SetChainType(s string) *TokenInfoUpdateOne {
	tiuo.mutation.SetChainType(s)
	return tiuo
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (tiuo *TokenInfoUpdateOne) SetNillableChainType(s *string) *TokenInfoUpdateOne {
	if s != nil {
		tiuo.SetChainType(*s)
	}
	return tiuo
}

// ClearChainType clears the value of the "chain_type" field.
func (tiuo *TokenInfoUpdateOne) ClearChainType() *TokenInfoUpdateOne {
	tiuo.mutation.ClearChainType()
	return tiuo
}

// SetTokenType sets the "token_type" field.
func (tiuo *TokenInfoUpdateOne) SetTokenType(s string) *TokenInfoUpdateOne {
	tiuo.mutation.SetTokenType(s)
	return tiuo
}

// SetNillableTokenType sets the "token_type" field if the given value is not nil.
func (tiuo *TokenInfoUpdateOne) SetNillableTokenType(s *string) *TokenInfoUpdateOne {
	if s != nil {
		tiuo.SetTokenType(*s)
	}
	return tiuo
}

// ClearTokenType clears the value of the "token_type" field.
func (tiuo *TokenInfoUpdateOne) ClearTokenType() *TokenInfoUpdateOne {
	tiuo.mutation.ClearTokenType()
	return tiuo
}

// SetUnit sets the "unit" field.
func (tiuo *TokenInfoUpdateOne) SetUnit(s string) *TokenInfoUpdateOne {
	tiuo.mutation.SetUnit(s)
	return tiuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (tiuo *TokenInfoUpdateOne) SetNillableUnit(s *string) *TokenInfoUpdateOne {
	if s != nil {
		tiuo.SetUnit(*s)
	}
	return tiuo
}

// ClearUnit clears the value of the "unit" field.
func (tiuo *TokenInfoUpdateOne) ClearUnit() *TokenInfoUpdateOne {
	tiuo.mutation.ClearUnit()
	return tiuo
}

// SetDecimal sets the "decimal" field.
func (tiuo *TokenInfoUpdateOne) SetDecimal(s string) *TokenInfoUpdateOne {
	tiuo.mutation.SetDecimal(s)
	return tiuo
}

// SetNillableDecimal sets the "decimal" field if the given value is not nil.
func (tiuo *TokenInfoUpdateOne) SetNillableDecimal(s *string) *TokenInfoUpdateOne {
	if s != nil {
		tiuo.SetDecimal(*s)
	}
	return tiuo
}

// ClearDecimal clears the value of the "decimal" field.
func (tiuo *TokenInfoUpdateOne) ClearDecimal() *TokenInfoUpdateOne {
	tiuo.mutation.ClearDecimal()
	return tiuo
}

// SetOfficialContract sets the "official_contract" field.
func (tiuo *TokenInfoUpdateOne) SetOfficialContract(s string) *TokenInfoUpdateOne {
	tiuo.mutation.SetOfficialContract(s)
	return tiuo
}

// SetPrivateContract sets the "private_contract" field.
func (tiuo *TokenInfoUpdateOne) SetPrivateContract(s string) *TokenInfoUpdateOne {
	tiuo.mutation.SetPrivateContract(s)
	return tiuo
}

// SetRemark sets the "remark" field.
func (tiuo *TokenInfoUpdateOne) SetRemark(s string) *TokenInfoUpdateOne {
	tiuo.mutation.SetRemark(s)
	return tiuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tiuo *TokenInfoUpdateOne) SetNillableRemark(s *string) *TokenInfoUpdateOne {
	if s != nil {
		tiuo.SetRemark(*s)
	}
	return tiuo
}

// ClearRemark clears the value of the "remark" field.
func (tiuo *TokenInfoUpdateOne) ClearRemark() *TokenInfoUpdateOne {
	tiuo.mutation.ClearRemark()
	return tiuo
}

// SetData sets the "data" field.
func (tiuo *TokenInfoUpdateOne) SetData(b []byte) *TokenInfoUpdateOne {
	tiuo.mutation.SetData(b)
	return tiuo
}

// ClearData clears the value of the "data" field.
func (tiuo *TokenInfoUpdateOne) ClearData() *TokenInfoUpdateOne {
	tiuo.mutation.ClearData()
	return tiuo
}

// Mutation returns the TokenInfoMutation object of the builder.
func (tiuo *TokenInfoUpdateOne) Mutation() *TokenInfoMutation {
	return tiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TokenInfoUpdateOne) Select(field string, fields ...string) *TokenInfoUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TokenInfo entity.
func (tiuo *TokenInfoUpdateOne) Save(ctx context.Context) (*TokenInfo, error) {
	var (
		err  error
		node *TokenInfo
	)
	if err := tiuo.defaults(); err != nil {
		return nil, err
	}
	if len(tiuo.hooks) == 0 {
		node, err = tiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TokenInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tiuo.mutation = mutation
			node, err = tiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tiuo.hooks) - 1; i >= 0; i-- {
			if tiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TokenInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TokenInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TokenInfoUpdateOne) SaveX(ctx context.Context) *TokenInfo {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TokenInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TokenInfoUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiuo *TokenInfoUpdateOne) defaults() error {
	if _, ok := tiuo.mutation.UpdatedAt(); !ok {
		if tokeninfo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized tokeninfo.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := tokeninfo.UpdateDefaultUpdatedAt()
		tiuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tiuo *TokenInfoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TokenInfoUpdateOne {
	tiuo.modifiers = append(tiuo.modifiers, modifiers...)
	return tiuo
}

func (tiuo *TokenInfoUpdateOne) sqlSave(ctx context.Context) (_node *TokenInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tokeninfo.Table,
			Columns: tokeninfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: tokeninfo.FieldID,
			},
		},
	}
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TokenInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokeninfo.FieldID)
		for _, f := range fields {
			if !tokeninfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tokeninfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldCreatedAt,
		})
	}
	if value, ok := tiuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldCreatedAt,
		})
	}
	if value, ok := tiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldUpdatedAt,
		})
	}
	if value, ok := tiuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldUpdatedAt,
		})
	}
	if value, ok := tiuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldDeletedAt,
		})
	}
	if value, ok := tiuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: tokeninfo.FieldDeletedAt,
		})
	}
	if value, ok := tiuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldName,
		})
	}
	if value, ok := tiuo.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldChainType,
		})
	}
	if tiuo.mutation.ChainTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldChainType,
		})
	}
	if value, ok := tiuo.mutation.TokenType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldTokenType,
		})
	}
	if tiuo.mutation.TokenTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldTokenType,
		})
	}
	if value, ok := tiuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldUnit,
		})
	}
	if tiuo.mutation.UnitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldUnit,
		})
	}
	if value, ok := tiuo.mutation.Decimal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldDecimal,
		})
	}
	if tiuo.mutation.DecimalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldDecimal,
		})
	}
	if value, ok := tiuo.mutation.OfficialContract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldOfficialContract,
		})
	}
	if value, ok := tiuo.mutation.PrivateContract(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldPrivateContract,
		})
	}
	if value, ok := tiuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokeninfo.FieldRemark,
		})
	}
	if tiuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tokeninfo.FieldRemark,
		})
	}
	if value, ok := tiuo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: tokeninfo.FieldData,
		})
	}
	if tiuo.mutation.DataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: tokeninfo.FieldData,
		})
	}
	_spec.Modifiers = tiuo.modifiers
	_node = &TokenInfo{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokeninfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
