// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/build-chain/pkg/db/ent/coinsinfo"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/deployedcoin"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/predicate"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCoinsInfo    = "CoinsInfo"
	TypeDeployedCoin = "DeployedCoin"
)

// CoinsInfoMutation represents an operation that mutates the CoinsInfo nodes in the graph.
type CoinsInfoMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	name          *string
	chain_type    *string
	token_type    *string
	contract      *string
	similarity    *int32
	addsimilarity *int32
	remark        *string
	data          *[]byte
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CoinsInfo, error)
	predicates    []predicate.CoinsInfo
}

var _ ent.Mutation = (*CoinsInfoMutation)(nil)

// coinsinfoOption allows management of the mutation configuration using functional options.
type coinsinfoOption func(*CoinsInfoMutation)

// newCoinsInfoMutation creates new mutation for the CoinsInfo entity.
func newCoinsInfoMutation(c config, op Op, opts ...coinsinfoOption) *CoinsInfoMutation {
	m := &CoinsInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinsInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinsInfoID sets the ID field of the mutation.
func withCoinsInfoID(id uuid.UUID) coinsinfoOption {
	return func(m *CoinsInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinsInfo
		)
		m.oldValue = func(ctx context.Context) (*CoinsInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinsInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinsInfo sets the old CoinsInfo of the mutation.
func withCoinsInfo(node *CoinsInfo) coinsinfoOption {
	return func(m *CoinsInfoMutation) {
		m.oldValue = func(context.Context) (*CoinsInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinsInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinsInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinsInfo entities.
func (m *CoinsInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinsInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinsInfoMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinsInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CoinsInfoMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CoinsInfoMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CoinsInfoMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CoinsInfoMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CoinsInfoMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CoinsInfoMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CoinsInfoMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CoinsInfoMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CoinsInfoMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CoinsInfoMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CoinsInfoMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CoinsInfoMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CoinsInfoMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CoinsInfoMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CoinsInfoMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *CoinsInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CoinsInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CoinsInfoMutation) ResetName() {
	m.name = nil
}

// SetChainType sets the "chain_type" field.
func (m *CoinsInfoMutation) SetChainType(s string) {
	m.chain_type = &s
}

// ChainType returns the value of the "chain_type" field in the mutation.
func (m *CoinsInfoMutation) ChainType() (r string, exists bool) {
	v := m.chain_type
	if v == nil {
		return
	}
	return *v, true
}

// OldChainType returns the old "chain_type" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldChainType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainType: %w", err)
	}
	return oldValue.ChainType, nil
}

// ClearChainType clears the value of the "chain_type" field.
func (m *CoinsInfoMutation) ClearChainType() {
	m.chain_type = nil
	m.clearedFields[coinsinfo.FieldChainType] = struct{}{}
}

// ChainTypeCleared returns if the "chain_type" field was cleared in this mutation.
func (m *CoinsInfoMutation) ChainTypeCleared() bool {
	_, ok := m.clearedFields[coinsinfo.FieldChainType]
	return ok
}

// ResetChainType resets all changes to the "chain_type" field.
func (m *CoinsInfoMutation) ResetChainType() {
	m.chain_type = nil
	delete(m.clearedFields, coinsinfo.FieldChainType)
}

// SetTokenType sets the "token_type" field.
func (m *CoinsInfoMutation) SetTokenType(s string) {
	m.token_type = &s
}

// TokenType returns the value of the "token_type" field in the mutation.
func (m *CoinsInfoMutation) TokenType() (r string, exists bool) {
	v := m.token_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenType returns the old "token_type" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldTokenType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenType: %w", err)
	}
	return oldValue.TokenType, nil
}

// ClearTokenType clears the value of the "token_type" field.
func (m *CoinsInfoMutation) ClearTokenType() {
	m.token_type = nil
	m.clearedFields[coinsinfo.FieldTokenType] = struct{}{}
}

// TokenTypeCleared returns if the "token_type" field was cleared in this mutation.
func (m *CoinsInfoMutation) TokenTypeCleared() bool {
	_, ok := m.clearedFields[coinsinfo.FieldTokenType]
	return ok
}

// ResetTokenType resets all changes to the "token_type" field.
func (m *CoinsInfoMutation) ResetTokenType() {
	m.token_type = nil
	delete(m.clearedFields, coinsinfo.FieldTokenType)
}

// SetContract sets the "contract" field.
func (m *CoinsInfoMutation) SetContract(s string) {
	m.contract = &s
}

// Contract returns the value of the "contract" field in the mutation.
func (m *CoinsInfoMutation) Contract() (r string, exists bool) {
	v := m.contract
	if v == nil {
		return
	}
	return *v, true
}

// OldContract returns the old "contract" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldContract(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContract is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContract requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContract: %w", err)
	}
	return oldValue.Contract, nil
}

// ResetContract resets all changes to the "contract" field.
func (m *CoinsInfoMutation) ResetContract() {
	m.contract = nil
}

// SetSimilarity sets the "similarity" field.
func (m *CoinsInfoMutation) SetSimilarity(i int32) {
	m.similarity = &i
	m.addsimilarity = nil
}

// Similarity returns the value of the "similarity" field in the mutation.
func (m *CoinsInfoMutation) Similarity() (r int32, exists bool) {
	v := m.similarity
	if v == nil {
		return
	}
	return *v, true
}

// OldSimilarity returns the old "similarity" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldSimilarity(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimilarity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimilarity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimilarity: %w", err)
	}
	return oldValue.Similarity, nil
}

// AddSimilarity adds i to the "similarity" field.
func (m *CoinsInfoMutation) AddSimilarity(i int32) {
	if m.addsimilarity != nil {
		*m.addsimilarity += i
	} else {
		m.addsimilarity = &i
	}
}

// AddedSimilarity returns the value that was added to the "similarity" field in this mutation.
func (m *CoinsInfoMutation) AddedSimilarity() (r int32, exists bool) {
	v := m.addsimilarity
	if v == nil {
		return
	}
	return *v, true
}

// ClearSimilarity clears the value of the "similarity" field.
func (m *CoinsInfoMutation) ClearSimilarity() {
	m.similarity = nil
	m.addsimilarity = nil
	m.clearedFields[coinsinfo.FieldSimilarity] = struct{}{}
}

// SimilarityCleared returns if the "similarity" field was cleared in this mutation.
func (m *CoinsInfoMutation) SimilarityCleared() bool {
	_, ok := m.clearedFields[coinsinfo.FieldSimilarity]
	return ok
}

// ResetSimilarity resets all changes to the "similarity" field.
func (m *CoinsInfoMutation) ResetSimilarity() {
	m.similarity = nil
	m.addsimilarity = nil
	delete(m.clearedFields, coinsinfo.FieldSimilarity)
}

// SetRemark sets the "remark" field.
func (m *CoinsInfoMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CoinsInfoMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *CoinsInfoMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[coinsinfo.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *CoinsInfoMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[coinsinfo.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *CoinsInfoMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, coinsinfo.FieldRemark)
}

// SetData sets the "data" field.
func (m *CoinsInfoMutation) SetData(b []byte) {
	m.data = &b
}

// Data returns the value of the "data" field in the mutation.
func (m *CoinsInfoMutation) Data() (r []byte, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the CoinsInfo entity.
// If the CoinsInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinsInfoMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *CoinsInfoMutation) ClearData() {
	m.data = nil
	m.clearedFields[coinsinfo.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *CoinsInfoMutation) DataCleared() bool {
	_, ok := m.clearedFields[coinsinfo.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *CoinsInfoMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, coinsinfo.FieldData)
}

// Where appends a list predicates to the CoinsInfoMutation builder.
func (m *CoinsInfoMutation) Where(ps ...predicate.CoinsInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinsInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinsInfo).
func (m *CoinsInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinsInfoMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, coinsinfo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coinsinfo.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, coinsinfo.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, coinsinfo.FieldName)
	}
	if m.chain_type != nil {
		fields = append(fields, coinsinfo.FieldChainType)
	}
	if m.token_type != nil {
		fields = append(fields, coinsinfo.FieldTokenType)
	}
	if m.contract != nil {
		fields = append(fields, coinsinfo.FieldContract)
	}
	if m.similarity != nil {
		fields = append(fields, coinsinfo.FieldSimilarity)
	}
	if m.remark != nil {
		fields = append(fields, coinsinfo.FieldRemark)
	}
	if m.data != nil {
		fields = append(fields, coinsinfo.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinsInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinsinfo.FieldCreatedAt:
		return m.CreatedAt()
	case coinsinfo.FieldUpdatedAt:
		return m.UpdatedAt()
	case coinsinfo.FieldDeletedAt:
		return m.DeletedAt()
	case coinsinfo.FieldName:
		return m.Name()
	case coinsinfo.FieldChainType:
		return m.ChainType()
	case coinsinfo.FieldTokenType:
		return m.TokenType()
	case coinsinfo.FieldContract:
		return m.Contract()
	case coinsinfo.FieldSimilarity:
		return m.Similarity()
	case coinsinfo.FieldRemark:
		return m.Remark()
	case coinsinfo.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinsInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinsinfo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coinsinfo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coinsinfo.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case coinsinfo.FieldName:
		return m.OldName(ctx)
	case coinsinfo.FieldChainType:
		return m.OldChainType(ctx)
	case coinsinfo.FieldTokenType:
		return m.OldTokenType(ctx)
	case coinsinfo.FieldContract:
		return m.OldContract(ctx)
	case coinsinfo.FieldSimilarity:
		return m.OldSimilarity(ctx)
	case coinsinfo.FieldRemark:
		return m.OldRemark(ctx)
	case coinsinfo.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown CoinsInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinsInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinsinfo.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coinsinfo.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coinsinfo.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case coinsinfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case coinsinfo.FieldChainType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainType(v)
		return nil
	case coinsinfo.FieldTokenType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenType(v)
		return nil
	case coinsinfo.FieldContract:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContract(v)
		return nil
	case coinsinfo.FieldSimilarity:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimilarity(v)
		return nil
	case coinsinfo.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case coinsinfo.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown CoinsInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinsInfoMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, coinsinfo.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, coinsinfo.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, coinsinfo.FieldDeletedAt)
	}
	if m.addsimilarity != nil {
		fields = append(fields, coinsinfo.FieldSimilarity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinsInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinsinfo.FieldCreatedAt:
		return m.AddedCreatedAt()
	case coinsinfo.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case coinsinfo.FieldDeletedAt:
		return m.AddedDeletedAt()
	case coinsinfo.FieldSimilarity:
		return m.AddedSimilarity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinsInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinsinfo.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case coinsinfo.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case coinsinfo.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case coinsinfo.FieldSimilarity:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSimilarity(v)
		return nil
	}
	return fmt.Errorf("unknown CoinsInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinsInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coinsinfo.FieldChainType) {
		fields = append(fields, coinsinfo.FieldChainType)
	}
	if m.FieldCleared(coinsinfo.FieldTokenType) {
		fields = append(fields, coinsinfo.FieldTokenType)
	}
	if m.FieldCleared(coinsinfo.FieldSimilarity) {
		fields = append(fields, coinsinfo.FieldSimilarity)
	}
	if m.FieldCleared(coinsinfo.FieldRemark) {
		fields = append(fields, coinsinfo.FieldRemark)
	}
	if m.FieldCleared(coinsinfo.FieldData) {
		fields = append(fields, coinsinfo.FieldData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinsInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinsInfoMutation) ClearField(name string) error {
	switch name {
	case coinsinfo.FieldChainType:
		m.ClearChainType()
		return nil
	case coinsinfo.FieldTokenType:
		m.ClearTokenType()
		return nil
	case coinsinfo.FieldSimilarity:
		m.ClearSimilarity()
		return nil
	case coinsinfo.FieldRemark:
		m.ClearRemark()
		return nil
	case coinsinfo.FieldData:
		m.ClearData()
		return nil
	}
	return fmt.Errorf("unknown CoinsInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinsInfoMutation) ResetField(name string) error {
	switch name {
	case coinsinfo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coinsinfo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coinsinfo.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case coinsinfo.FieldName:
		m.ResetName()
		return nil
	case coinsinfo.FieldChainType:
		m.ResetChainType()
		return nil
	case coinsinfo.FieldTokenType:
		m.ResetTokenType()
		return nil
	case coinsinfo.FieldContract:
		m.ResetContract()
		return nil
	case coinsinfo.FieldSimilarity:
		m.ResetSimilarity()
		return nil
	case coinsinfo.FieldRemark:
		m.ResetRemark()
		return nil
	case coinsinfo.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown CoinsInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinsInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinsInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinsInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinsInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinsInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinsInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinsInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinsInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinsInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinsInfo edge %s", name)
}

// DeployedCoinMutation represents an operation that mutates the DeployedCoin nodes in the graph.
type DeployedCoinMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	coin_id       *uuid.UUID
	contract      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DeployedCoin, error)
	predicates    []predicate.DeployedCoin
}

var _ ent.Mutation = (*DeployedCoinMutation)(nil)

// deployedcoinOption allows management of the mutation configuration using functional options.
type deployedcoinOption func(*DeployedCoinMutation)

// newDeployedCoinMutation creates new mutation for the DeployedCoin entity.
func newDeployedCoinMutation(c config, op Op, opts ...deployedcoinOption) *DeployedCoinMutation {
	m := &DeployedCoinMutation{
		config:        c,
		op:            op,
		typ:           TypeDeployedCoin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeployedCoinID sets the ID field of the mutation.
func withDeployedCoinID(id uuid.UUID) deployedcoinOption {
	return func(m *DeployedCoinMutation) {
		var (
			err   error
			once  sync.Once
			value *DeployedCoin
		)
		m.oldValue = func(ctx context.Context) (*DeployedCoin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeployedCoin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeployedCoin sets the old DeployedCoin of the mutation.
func withDeployedCoin(node *DeployedCoin) deployedcoinOption {
	return func(m *DeployedCoinMutation) {
		m.oldValue = func(context.Context) (*DeployedCoin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeployedCoinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeployedCoinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DeployedCoin entities.
func (m *DeployedCoinMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeployedCoinMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeployedCoinMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DeployedCoin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DeployedCoinMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DeployedCoinMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DeployedCoin entity.
// If the DeployedCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeployedCoinMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *DeployedCoinMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *DeployedCoinMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DeployedCoinMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DeployedCoinMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DeployedCoinMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DeployedCoin entity.
// If the DeployedCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeployedCoinMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *DeployedCoinMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *DeployedCoinMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DeployedCoinMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DeployedCoinMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DeployedCoinMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the DeployedCoin entity.
// If the DeployedCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeployedCoinMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *DeployedCoinMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *DeployedCoinMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DeployedCoinMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinID sets the "coin_id" field.
func (m *DeployedCoinMutation) SetCoinID(u uuid.UUID) {
	m.coin_id = &u
}

// CoinID returns the value of the "coin_id" field in the mutation.
func (m *DeployedCoinMutation) CoinID() (r uuid.UUID, exists bool) {
	v := m.coin_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinID returns the old "coin_id" field's value of the DeployedCoin entity.
// If the DeployedCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeployedCoinMutation) OldCoinID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinID: %w", err)
	}
	return oldValue.CoinID, nil
}

// ResetCoinID resets all changes to the "coin_id" field.
func (m *DeployedCoinMutation) ResetCoinID() {
	m.coin_id = nil
}

// SetContract sets the "contract" field.
func (m *DeployedCoinMutation) SetContract(s string) {
	m.contract = &s
}

// Contract returns the value of the "contract" field in the mutation.
func (m *DeployedCoinMutation) Contract() (r string, exists bool) {
	v := m.contract
	if v == nil {
		return
	}
	return *v, true
}

// OldContract returns the old "contract" field's value of the DeployedCoin entity.
// If the DeployedCoin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeployedCoinMutation) OldContract(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContract is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContract requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContract: %w", err)
	}
	return oldValue.Contract, nil
}

// ClearContract clears the value of the "contract" field.
func (m *DeployedCoinMutation) ClearContract() {
	m.contract = nil
	m.clearedFields[deployedcoin.FieldContract] = struct{}{}
}

// ContractCleared returns if the "contract" field was cleared in this mutation.
func (m *DeployedCoinMutation) ContractCleared() bool {
	_, ok := m.clearedFields[deployedcoin.FieldContract]
	return ok
}

// ResetContract resets all changes to the "contract" field.
func (m *DeployedCoinMutation) ResetContract() {
	m.contract = nil
	delete(m.clearedFields, deployedcoin.FieldContract)
}

// Where appends a list predicates to the DeployedCoinMutation builder.
func (m *DeployedCoinMutation) Where(ps ...predicate.DeployedCoin) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DeployedCoinMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DeployedCoin).
func (m *DeployedCoinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeployedCoinMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, deployedcoin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, deployedcoin.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, deployedcoin.FieldDeletedAt)
	}
	if m.coin_id != nil {
		fields = append(fields, deployedcoin.FieldCoinID)
	}
	if m.contract != nil {
		fields = append(fields, deployedcoin.FieldContract)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeployedCoinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deployedcoin.FieldCreatedAt:
		return m.CreatedAt()
	case deployedcoin.FieldUpdatedAt:
		return m.UpdatedAt()
	case deployedcoin.FieldDeletedAt:
		return m.DeletedAt()
	case deployedcoin.FieldCoinID:
		return m.CoinID()
	case deployedcoin.FieldContract:
		return m.Contract()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeployedCoinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deployedcoin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case deployedcoin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case deployedcoin.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case deployedcoin.FieldCoinID:
		return m.OldCoinID(ctx)
	case deployedcoin.FieldContract:
		return m.OldContract(ctx)
	}
	return nil, fmt.Errorf("unknown DeployedCoin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeployedCoinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deployedcoin.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case deployedcoin.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case deployedcoin.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case deployedcoin.FieldCoinID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinID(v)
		return nil
	case deployedcoin.FieldContract:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContract(v)
		return nil
	}
	return fmt.Errorf("unknown DeployedCoin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeployedCoinMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, deployedcoin.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, deployedcoin.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, deployedcoin.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeployedCoinMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deployedcoin.FieldCreatedAt:
		return m.AddedCreatedAt()
	case deployedcoin.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case deployedcoin.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeployedCoinMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deployedcoin.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case deployedcoin.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case deployedcoin.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DeployedCoin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeployedCoinMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(deployedcoin.FieldContract) {
		fields = append(fields, deployedcoin.FieldContract)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeployedCoinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeployedCoinMutation) ClearField(name string) error {
	switch name {
	case deployedcoin.FieldContract:
		m.ClearContract()
		return nil
	}
	return fmt.Errorf("unknown DeployedCoin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeployedCoinMutation) ResetField(name string) error {
	switch name {
	case deployedcoin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case deployedcoin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case deployedcoin.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case deployedcoin.FieldCoinID:
		m.ResetCoinID()
		return nil
	case deployedcoin.FieldContract:
		m.ResetContract()
		return nil
	}
	return fmt.Errorf("unknown DeployedCoin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeployedCoinMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeployedCoinMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeployedCoinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeployedCoinMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeployedCoinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeployedCoinMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeployedCoinMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DeployedCoin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeployedCoinMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DeployedCoin edge %s", name)
}
