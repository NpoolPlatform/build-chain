// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/build-chain/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/build-chain/pkg/db/ent/tokeninfo"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTokenInfo = "TokenInfo"
)

// TokenInfoMutation represents an operation that mutates the TokenInfo nodes in the graph.
type TokenInfoMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *uint32
	addcreated_at     *int32
	updated_at        *uint32
	addupdated_at     *int32
	deleted_at        *uint32
	adddeleted_at     *int32
	name              *string
	chain_type        *string
	token_type        *string
	unit              *string
	decimal           *string
	official_contract *string
	private_contract  *string
	remark            *string
	data              *[]byte
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*TokenInfo, error)
	predicates        []predicate.TokenInfo
}

var _ ent.Mutation = (*TokenInfoMutation)(nil)

// tokeninfoOption allows management of the mutation configuration using functional options.
type tokeninfoOption func(*TokenInfoMutation)

// newTokenInfoMutation creates new mutation for the TokenInfo entity.
func newTokenInfoMutation(c config, op Op, opts ...tokeninfoOption) *TokenInfoMutation {
	m := &TokenInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeTokenInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTokenInfoID sets the ID field of the mutation.
func withTokenInfoID(id uuid.UUID) tokeninfoOption {
	return func(m *TokenInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *TokenInfo
		)
		m.oldValue = func(ctx context.Context) (*TokenInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TokenInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTokenInfo sets the old TokenInfo of the mutation.
func withTokenInfo(node *TokenInfo) tokeninfoOption {
	return func(m *TokenInfoMutation) {
		m.oldValue = func(context.Context) (*TokenInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TokenInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TokenInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TokenInfo entities.
func (m *TokenInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TokenInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TokenInfoMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TokenInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TokenInfoMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TokenInfoMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *TokenInfoMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TokenInfoMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TokenInfoMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TokenInfoMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TokenInfoMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *TokenInfoMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TokenInfoMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TokenInfoMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TokenInfoMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TokenInfoMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *TokenInfoMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *TokenInfoMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TokenInfoMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *TokenInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TokenInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TokenInfoMutation) ResetName() {
	m.name = nil
}

// SetChainType sets the "chain_type" field.
func (m *TokenInfoMutation) SetChainType(s string) {
	m.chain_type = &s
}

// ChainType returns the value of the "chain_type" field in the mutation.
func (m *TokenInfoMutation) ChainType() (r string, exists bool) {
	v := m.chain_type
	if v == nil {
		return
	}
	return *v, true
}

// OldChainType returns the old "chain_type" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldChainType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainType: %w", err)
	}
	return oldValue.ChainType, nil
}

// ClearChainType clears the value of the "chain_type" field.
func (m *TokenInfoMutation) ClearChainType() {
	m.chain_type = nil
	m.clearedFields[tokeninfo.FieldChainType] = struct{}{}
}

// ChainTypeCleared returns if the "chain_type" field was cleared in this mutation.
func (m *TokenInfoMutation) ChainTypeCleared() bool {
	_, ok := m.clearedFields[tokeninfo.FieldChainType]
	return ok
}

// ResetChainType resets all changes to the "chain_type" field.
func (m *TokenInfoMutation) ResetChainType() {
	m.chain_type = nil
	delete(m.clearedFields, tokeninfo.FieldChainType)
}

// SetTokenType sets the "token_type" field.
func (m *TokenInfoMutation) SetTokenType(s string) {
	m.token_type = &s
}

// TokenType returns the value of the "token_type" field in the mutation.
func (m *TokenInfoMutation) TokenType() (r string, exists bool) {
	v := m.token_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenType returns the old "token_type" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldTokenType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenType: %w", err)
	}
	return oldValue.TokenType, nil
}

// ClearTokenType clears the value of the "token_type" field.
func (m *TokenInfoMutation) ClearTokenType() {
	m.token_type = nil
	m.clearedFields[tokeninfo.FieldTokenType] = struct{}{}
}

// TokenTypeCleared returns if the "token_type" field was cleared in this mutation.
func (m *TokenInfoMutation) TokenTypeCleared() bool {
	_, ok := m.clearedFields[tokeninfo.FieldTokenType]
	return ok
}

// ResetTokenType resets all changes to the "token_type" field.
func (m *TokenInfoMutation) ResetTokenType() {
	m.token_type = nil
	delete(m.clearedFields, tokeninfo.FieldTokenType)
}

// SetUnit sets the "unit" field.
func (m *TokenInfoMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *TokenInfoMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ClearUnit clears the value of the "unit" field.
func (m *TokenInfoMutation) ClearUnit() {
	m.unit = nil
	m.clearedFields[tokeninfo.FieldUnit] = struct{}{}
}

// UnitCleared returns if the "unit" field was cleared in this mutation.
func (m *TokenInfoMutation) UnitCleared() bool {
	_, ok := m.clearedFields[tokeninfo.FieldUnit]
	return ok
}

// ResetUnit resets all changes to the "unit" field.
func (m *TokenInfoMutation) ResetUnit() {
	m.unit = nil
	delete(m.clearedFields, tokeninfo.FieldUnit)
}

// SetDecimal sets the "decimal" field.
func (m *TokenInfoMutation) SetDecimal(s string) {
	m.decimal = &s
}

// Decimal returns the value of the "decimal" field in the mutation.
func (m *TokenInfoMutation) Decimal() (r string, exists bool) {
	v := m.decimal
	if v == nil {
		return
	}
	return *v, true
}

// OldDecimal returns the old "decimal" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldDecimal(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDecimal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDecimal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDecimal: %w", err)
	}
	return oldValue.Decimal, nil
}

// ClearDecimal clears the value of the "decimal" field.
func (m *TokenInfoMutation) ClearDecimal() {
	m.decimal = nil
	m.clearedFields[tokeninfo.FieldDecimal] = struct{}{}
}

// DecimalCleared returns if the "decimal" field was cleared in this mutation.
func (m *TokenInfoMutation) DecimalCleared() bool {
	_, ok := m.clearedFields[tokeninfo.FieldDecimal]
	return ok
}

// ResetDecimal resets all changes to the "decimal" field.
func (m *TokenInfoMutation) ResetDecimal() {
	m.decimal = nil
	delete(m.clearedFields, tokeninfo.FieldDecimal)
}

// SetOfficialContract sets the "official_contract" field.
func (m *TokenInfoMutation) SetOfficialContract(s string) {
	m.official_contract = &s
}

// OfficialContract returns the value of the "official_contract" field in the mutation.
func (m *TokenInfoMutation) OfficialContract() (r string, exists bool) {
	v := m.official_contract
	if v == nil {
		return
	}
	return *v, true
}

// OldOfficialContract returns the old "official_contract" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldOfficialContract(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOfficialContract is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOfficialContract requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOfficialContract: %w", err)
	}
	return oldValue.OfficialContract, nil
}

// ResetOfficialContract resets all changes to the "official_contract" field.
func (m *TokenInfoMutation) ResetOfficialContract() {
	m.official_contract = nil
}

// SetPrivateContract sets the "private_contract" field.
func (m *TokenInfoMutation) SetPrivateContract(s string) {
	m.private_contract = &s
}

// PrivateContract returns the value of the "private_contract" field in the mutation.
func (m *TokenInfoMutation) PrivateContract() (r string, exists bool) {
	v := m.private_contract
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivateContract returns the old "private_contract" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldPrivateContract(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivateContract is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivateContract requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivateContract: %w", err)
	}
	return oldValue.PrivateContract, nil
}

// ResetPrivateContract resets all changes to the "private_contract" field.
func (m *TokenInfoMutation) ResetPrivateContract() {
	m.private_contract = nil
}

// SetRemark sets the "remark" field.
func (m *TokenInfoMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *TokenInfoMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *TokenInfoMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[tokeninfo.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *TokenInfoMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[tokeninfo.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *TokenInfoMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, tokeninfo.FieldRemark)
}

// SetData sets the "data" field.
func (m *TokenInfoMutation) SetData(b []byte) {
	m.data = &b
}

// Data returns the value of the "data" field in the mutation.
func (m *TokenInfoMutation) Data() (r []byte, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the TokenInfo entity.
// If the TokenInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TokenInfoMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *TokenInfoMutation) ClearData() {
	m.data = nil
	m.clearedFields[tokeninfo.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *TokenInfoMutation) DataCleared() bool {
	_, ok := m.clearedFields[tokeninfo.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *TokenInfoMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, tokeninfo.FieldData)
}

// Where appends a list predicates to the TokenInfoMutation builder.
func (m *TokenInfoMutation) Where(ps ...predicate.TokenInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TokenInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TokenInfo).
func (m *TokenInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TokenInfoMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, tokeninfo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tokeninfo.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, tokeninfo.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, tokeninfo.FieldName)
	}
	if m.chain_type != nil {
		fields = append(fields, tokeninfo.FieldChainType)
	}
	if m.token_type != nil {
		fields = append(fields, tokeninfo.FieldTokenType)
	}
	if m.unit != nil {
		fields = append(fields, tokeninfo.FieldUnit)
	}
	if m.decimal != nil {
		fields = append(fields, tokeninfo.FieldDecimal)
	}
	if m.official_contract != nil {
		fields = append(fields, tokeninfo.FieldOfficialContract)
	}
	if m.private_contract != nil {
		fields = append(fields, tokeninfo.FieldPrivateContract)
	}
	if m.remark != nil {
		fields = append(fields, tokeninfo.FieldRemark)
	}
	if m.data != nil {
		fields = append(fields, tokeninfo.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TokenInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tokeninfo.FieldCreatedAt:
		return m.CreatedAt()
	case tokeninfo.FieldUpdatedAt:
		return m.UpdatedAt()
	case tokeninfo.FieldDeletedAt:
		return m.DeletedAt()
	case tokeninfo.FieldName:
		return m.Name()
	case tokeninfo.FieldChainType:
		return m.ChainType()
	case tokeninfo.FieldTokenType:
		return m.TokenType()
	case tokeninfo.FieldUnit:
		return m.Unit()
	case tokeninfo.FieldDecimal:
		return m.Decimal()
	case tokeninfo.FieldOfficialContract:
		return m.OfficialContract()
	case tokeninfo.FieldPrivateContract:
		return m.PrivateContract()
	case tokeninfo.FieldRemark:
		return m.Remark()
	case tokeninfo.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TokenInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tokeninfo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tokeninfo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case tokeninfo.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case tokeninfo.FieldName:
		return m.OldName(ctx)
	case tokeninfo.FieldChainType:
		return m.OldChainType(ctx)
	case tokeninfo.FieldTokenType:
		return m.OldTokenType(ctx)
	case tokeninfo.FieldUnit:
		return m.OldUnit(ctx)
	case tokeninfo.FieldDecimal:
		return m.OldDecimal(ctx)
	case tokeninfo.FieldOfficialContract:
		return m.OldOfficialContract(ctx)
	case tokeninfo.FieldPrivateContract:
		return m.OldPrivateContract(ctx)
	case tokeninfo.FieldRemark:
		return m.OldRemark(ctx)
	case tokeninfo.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown TokenInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tokeninfo.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tokeninfo.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case tokeninfo.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case tokeninfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tokeninfo.FieldChainType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainType(v)
		return nil
	case tokeninfo.FieldTokenType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenType(v)
		return nil
	case tokeninfo.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case tokeninfo.FieldDecimal:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDecimal(v)
		return nil
	case tokeninfo.FieldOfficialContract:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOfficialContract(v)
		return nil
	case tokeninfo.FieldPrivateContract:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivateContract(v)
		return nil
	case tokeninfo.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case tokeninfo.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown TokenInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TokenInfoMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, tokeninfo.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, tokeninfo.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, tokeninfo.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TokenInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tokeninfo.FieldCreatedAt:
		return m.AddedCreatedAt()
	case tokeninfo.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case tokeninfo.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TokenInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tokeninfo.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case tokeninfo.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case tokeninfo.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TokenInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TokenInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tokeninfo.FieldChainType) {
		fields = append(fields, tokeninfo.FieldChainType)
	}
	if m.FieldCleared(tokeninfo.FieldTokenType) {
		fields = append(fields, tokeninfo.FieldTokenType)
	}
	if m.FieldCleared(tokeninfo.FieldUnit) {
		fields = append(fields, tokeninfo.FieldUnit)
	}
	if m.FieldCleared(tokeninfo.FieldDecimal) {
		fields = append(fields, tokeninfo.FieldDecimal)
	}
	if m.FieldCleared(tokeninfo.FieldRemark) {
		fields = append(fields, tokeninfo.FieldRemark)
	}
	if m.FieldCleared(tokeninfo.FieldData) {
		fields = append(fields, tokeninfo.FieldData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TokenInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TokenInfoMutation) ClearField(name string) error {
	switch name {
	case tokeninfo.FieldChainType:
		m.ClearChainType()
		return nil
	case tokeninfo.FieldTokenType:
		m.ClearTokenType()
		return nil
	case tokeninfo.FieldUnit:
		m.ClearUnit()
		return nil
	case tokeninfo.FieldDecimal:
		m.ClearDecimal()
		return nil
	case tokeninfo.FieldRemark:
		m.ClearRemark()
		return nil
	case tokeninfo.FieldData:
		m.ClearData()
		return nil
	}
	return fmt.Errorf("unknown TokenInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TokenInfoMutation) ResetField(name string) error {
	switch name {
	case tokeninfo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tokeninfo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case tokeninfo.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case tokeninfo.FieldName:
		m.ResetName()
		return nil
	case tokeninfo.FieldChainType:
		m.ResetChainType()
		return nil
	case tokeninfo.FieldTokenType:
		m.ResetTokenType()
		return nil
	case tokeninfo.FieldUnit:
		m.ResetUnit()
		return nil
	case tokeninfo.FieldDecimal:
		m.ResetDecimal()
		return nil
	case tokeninfo.FieldOfficialContract:
		m.ResetOfficialContract()
		return nil
	case tokeninfo.FieldPrivateContract:
		m.ResetPrivateContract()
		return nil
	case tokeninfo.FieldRemark:
		m.ResetRemark()
		return nil
	case tokeninfo.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown TokenInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TokenInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TokenInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TokenInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TokenInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TokenInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TokenInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TokenInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TokenInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TokenInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TokenInfo edge %s", name)
}
